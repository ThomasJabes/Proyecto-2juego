
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006cbfc  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806f69c  0806f69c  000725c4  2**0
                  CONTENTS
  4 .ARM          00000008  0806f69c  0806f69c  0007069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806f6a4  0806f6a4  000725c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806f6a4  0806f6a4  000706a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0806f6a8  0806f6a8  000706a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000015c4  20000000  0806f6ac  00071000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200015c4  08070c70  000725c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  08070c70  0007263c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000725c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fe4  00000000  00000000  000725f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172b  00000000  00000000  000795d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0007ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021964  00000000  00000000  0007b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000098c2  00000000  00000000  0009cd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c9412  00000000  00000000  000a6636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016fa48  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000520  00000000  00000000  0016fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a98  00000000  00000000  0016ffac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00171a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200015c4 	.word	0x200015c4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a88 	.word	0x08002a88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200015c8 	.word	0x200015c8
 8000200:	08002a88 	.word	0x08002a88

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	4878      	ldr	r0, [pc, #480]	@ (80006f0 <LCD_Init+0x1ec>)
 800050e:	f001 fcbd 	bl	8001e8c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000512:	2201      	movs	r2, #1
 8000514:	2113      	movs	r1, #19
 8000516:	4877      	ldr	r0, [pc, #476]	@ (80006f4 <LCD_Init+0x1f0>)
 8000518:	f001 fcb8 	bl	8001e8c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	4875      	ldr	r0, [pc, #468]	@ (80006f8 <LCD_Init+0x1f4>)
 8000522:	f001 fcb3 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000526:	2005      	movs	r0, #5
 8000528:	f001 fa12 	bl	8001950 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	4871      	ldr	r0, [pc, #452]	@ (80006f8 <LCD_Init+0x1f4>)
 8000532:	f001 fcab 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000536:	2014      	movs	r0, #20
 8000538:	f001 fa0a 	bl	8001950 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2102      	movs	r1, #2
 8000540:	486d      	ldr	r0, [pc, #436]	@ (80006f8 <LCD_Init+0x1f4>)
 8000542:	f001 fca3 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000546:	2096      	movs	r0, #150	@ 0x96
 8000548:	f001 fa02 	bl	8001950 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4867      	ldr	r0, [pc, #412]	@ (80006f0 <LCD_Init+0x1ec>)
 8000552:	f001 fc9b 	bl	8001e8c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000556:	20e9      	movs	r0, #233	@ 0xe9
 8000558:	f000 f8d0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x20);
 800055c:	2020      	movs	r0, #32
 800055e:	f000 f973 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000562:	2011      	movs	r0, #17
 8000564:	f000 f8ca 	bl	80006fc <LCD_CMD>
	HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f001 f9f1 	bl	8001950 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800056e:	20d1      	movs	r0, #209	@ 0xd1
 8000570:	f000 f8c4 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f967 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x71);
 800057a:	2071      	movs	r0, #113	@ 0x71
 800057c:	f000 f964 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x19);
 8000580:	2019      	movs	r0, #25
 8000582:	f000 f961 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000586:	20d0      	movs	r0, #208	@ 0xd0
 8000588:	f000 f8b8 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x07);
 800058c:	2007      	movs	r0, #7
 800058e:	f000 f95b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 f958 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 8000598:	2008      	movs	r0, #8
 800059a:	f000 f955 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800059e:	2036      	movs	r0, #54	@ 0x36
 80005a0:	f000 f8ac 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005a4:	20e8      	movs	r0, #232	@ 0xe8
 80005a6:	f000 f94f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005aa:	203a      	movs	r0, #58	@ 0x3a
 80005ac:	f000 f8a6 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 f949 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005b6:	20c1      	movs	r0, #193	@ 0xc1
 80005b8:	f000 f8a0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 f943 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 80005c2:	2010      	movs	r0, #16
 80005c4:	f000 f940 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f93d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 f93a 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80005d4:	20c0      	movs	r0, #192	@ 0xc0
 80005d6:	f000 f891 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f934 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 80005e0:	2035      	movs	r0, #53	@ 0x35
 80005e2:	f000 f931 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f92e 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f92b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f928 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 f925 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80005fe:	20c5      	movs	r0, #197	@ 0xc5
 8000600:	f000 f87c 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000604:	2004      	movs	r0, #4
 8000606:	f000 f91f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800060a:	20d2      	movs	r0, #210	@ 0xd2
 800060c:	f000 f876 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x01);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f919 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x44);
 8000616:	2044      	movs	r0, #68	@ 0x44
 8000618:	f000 f916 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800061c:	20c8      	movs	r0, #200	@ 0xc8
 800061e:	f000 f86d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04);
 8000622:	2004      	movs	r0, #4
 8000624:	f000 f910 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x67);
 8000628:	2067      	movs	r0, #103	@ 0x67
 800062a:	f000 f90d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 800062e:	2035      	movs	r0, #53	@ 0x35
 8000630:	f000 f90a 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x04);
 8000634:	2004      	movs	r0, #4
 8000636:	f000 f907 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800063a:	2008      	movs	r0, #8
 800063c:	f000 f904 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x06);
 8000640:	2006      	movs	r0, #6
 8000642:	f000 f901 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x24);
 8000646:	2024      	movs	r0, #36	@ 0x24
 8000648:	f000 f8fe 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f8fb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x37);
 8000652:	2037      	movs	r0, #55	@ 0x37
 8000654:	f000 f8f8 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x40);
 8000658:	2040      	movs	r0, #64	@ 0x40
 800065a:	f000 f8f5 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x03);
 800065e:	2003      	movs	r0, #3
 8000660:	f000 f8f2 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 8000664:	2010      	movs	r0, #16
 8000666:	f000 f8ef 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 f8ec 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x80);
 8000670:	2080      	movs	r0, #128	@ 0x80
 8000672:	f000 f8e9 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f8e6 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800067c:	202a      	movs	r0, #42	@ 0x2a
 800067e:	f000 f83d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f8e0 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8dd 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f8da 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x3F);
 8000694:	203f      	movs	r0, #63	@ 0x3f
 8000696:	f000 f8d7 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800069a:	202b      	movs	r0, #43	@ 0x2b
 800069c:	f000 f82e 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f8d1 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ce 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f8cb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0xE0);
 80006b2:	20e0      	movs	r0, #224	@ 0xe0
 80006b4:	f000 f8c8 	bl	8000848 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006b8:	2029      	movs	r0, #41	@ 0x29
 80006ba:	f000 f81f 	bl	80006fc <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006be:	202c      	movs	r0, #44	@ 0x2c
 80006c0:	f000 f81c 	bl	80006fc <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006c4:	2020      	movs	r0, #32
 80006c6:	f000 f819 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f001 f940 	bl	8001950 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006d0:	2011      	movs	r0, #17
 80006d2:	f000 f813 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f001 f93a 	bl	8001950 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80006dc:	2029      	movs	r0, #41	@ 0x29
 80006de:	f000 f80d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <LCD_Init+0x1ec>)
 80006e8:	f001 fbd0 	bl	8001e8c <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020800 	.word	0x40020800

080006fc <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	484c      	ldr	r0, [pc, #304]	@ (800083c <LCD_CMD+0x140>)
 800070c:	f001 fbbe 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	4849      	ldr	r0, [pc, #292]	@ (800083c <LCD_CMD+0x140>)
 8000716:	f001 fbb9 	bl	8001e8c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <LCD_CMD+0x140>)
 800072c:	f001 fbae 	bl	8001e8c <HAL_GPIO_WritePin>
 8000730:	e005      	b.n	800073e <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	4840      	ldr	r0, [pc, #256]	@ (800083c <LCD_CMD+0x140>)
 800073a:	f001 fba7 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	483c      	ldr	r0, [pc, #240]	@ (8000840 <LCD_CMD+0x144>)
 800074e:	f001 fb9d 	bl	8001e8c <HAL_GPIO_WritePin>
 8000752:	e004      	b.n	800075e <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <LCD_CMD+0x144>)
 800075a:	f001 fb97 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <LCD_CMD+0x140>)
 8000770:	f001 fb8c 	bl	8001e8c <HAL_GPIO_WritePin>
 8000774:	e005      	b.n	8000782 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <LCD_CMD+0x140>)
 800077e:	f001 fb85 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2108      	movs	r1, #8
 8000790:	482c      	ldr	r0, [pc, #176]	@ (8000844 <LCD_CMD+0x148>)
 8000792:	f001 fb7b 	bl	8001e8c <HAL_GPIO_WritePin>
 8000796:	e004      	b.n	80007a2 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	4829      	ldr	r0, [pc, #164]	@ (8000844 <LCD_CMD+0x148>)
 800079e:	f001 fb75 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2120      	movs	r1, #32
 80007b0:	4824      	ldr	r0, [pc, #144]	@ (8000844 <LCD_CMD+0x148>)
 80007b2:	f001 fb6b 	bl	8001e8c <HAL_GPIO_WritePin>
 80007b6:	e004      	b.n	80007c2 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4821      	ldr	r0, [pc, #132]	@ (8000844 <LCD_CMD+0x148>)
 80007be:	f001 fb65 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d005      	beq.n	80007d8 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	481c      	ldr	r0, [pc, #112]	@ (8000844 <LCD_CMD+0x148>)
 80007d2:	f001 fb5b 	bl	8001e8c <HAL_GPIO_WritePin>
 80007d6:	e004      	b.n	80007e2 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2110      	movs	r1, #16
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <LCD_CMD+0x148>)
 80007de:	f001 fb55 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d006      	beq.n	80007fa <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	4814      	ldr	r0, [pc, #80]	@ (8000844 <LCD_CMD+0x148>)
 80007f4:	f001 fb4a 	bl	8001e8c <HAL_GPIO_WritePin>
 80007f8:	e005      	b.n	8000806 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <LCD_CMD+0x148>)
 8000802:	f001 fb43 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	da06      	bge.n	800081c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <LCD_CMD+0x140>)
 8000816:	f001 fb39 	bl	8001e8c <HAL_GPIO_WritePin>
 800081a:	e005      	b.n	8000828 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <LCD_CMD+0x140>)
 8000824:	f001 fb32 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <LCD_CMD+0x140>)
 800082e:	f001 fb2d 	bl	8001e8c <HAL_GPIO_WritePin>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400

08000848 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	484c      	ldr	r0, [pc, #304]	@ (8000988 <LCD_DATA+0x140>)
 8000858:	f001 fb18 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	4849      	ldr	r0, [pc, #292]	@ (8000988 <LCD_DATA+0x140>)
 8000862:	f001 fb13 	bl	8001e8c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000876:	4844      	ldr	r0, [pc, #272]	@ (8000988 <LCD_DATA+0x140>)
 8000878:	f001 fb08 	bl	8001e8c <HAL_GPIO_WritePin>
 800087c:	e005      	b.n	800088a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000884:	4840      	ldr	r0, [pc, #256]	@ (8000988 <LCD_DATA+0x140>)
 8000886:	f001 fb01 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	483c      	ldr	r0, [pc, #240]	@ (800098c <LCD_DATA+0x144>)
 800089a:	f001 faf7 	bl	8001e8c <HAL_GPIO_WritePin>
 800089e:	e004      	b.n	80008aa <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	@ 0x80
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <LCD_DATA+0x144>)
 80008a6:	f001 faf1 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ba:	4833      	ldr	r0, [pc, #204]	@ (8000988 <LCD_DATA+0x140>)
 80008bc:	f001 fae6 	bl	8001e8c <HAL_GPIO_WritePin>
 80008c0:	e005      	b.n	80008ce <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	482f      	ldr	r0, [pc, #188]	@ (8000988 <LCD_DATA+0x140>)
 80008ca:	f001 fadf 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d005      	beq.n	80008e4 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2108      	movs	r1, #8
 80008dc:	482c      	ldr	r0, [pc, #176]	@ (8000990 <LCD_DATA+0x148>)
 80008de:	f001 fad5 	bl	8001e8c <HAL_GPIO_WritePin>
 80008e2:	e004      	b.n	80008ee <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	4829      	ldr	r0, [pc, #164]	@ (8000990 <LCD_DATA+0x148>)
 80008ea:	f001 facf 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	4824      	ldr	r0, [pc, #144]	@ (8000990 <LCD_DATA+0x148>)
 80008fe:	f001 fac5 	bl	8001e8c <HAL_GPIO_WritePin>
 8000902:	e004      	b.n	800090e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2120      	movs	r1, #32
 8000908:	4821      	ldr	r0, [pc, #132]	@ (8000990 <LCD_DATA+0x148>)
 800090a:	f001 fabf 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <LCD_DATA+0x148>)
 800091e:	f001 fab5 	bl	8001e8c <HAL_GPIO_WritePin>
 8000922:	e004      	b.n	800092e <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4819      	ldr	r0, [pc, #100]	@ (8000990 <LCD_DATA+0x148>)
 800092a:	f001 faaf 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <LCD_DATA+0x148>)
 8000940:	f001 faa4 	bl	8001e8c <HAL_GPIO_WritePin>
 8000944:	e005      	b.n	8000952 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <LCD_DATA+0x148>)
 800094e:	f001 fa9d 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da06      	bge.n	8000968 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <LCD_DATA+0x140>)
 8000962:	f001 fa93 	bl	8001e8c <HAL_GPIO_WritePin>
 8000966:	e005      	b.n	8000974 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <LCD_DATA+0x140>)
 8000970:	f001 fa8c 	bl	8001e8c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <LCD_DATA+0x140>)
 800097a:	f001 fa87 	bl	8001e8c <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020400 	.word	0x40020400

08000994 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009a2:	202a      	movs	r0, #42	@ 0x2a
 80009a4:	f7ff feaa 	bl	80006fc <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff4a 	bl	8000848 <LCD_DATA>
	LCD_DATA(x1);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff45 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff3f 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff3a 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80009d4:	202b      	movs	r0, #43	@ 0x2b
 80009d6:	f7ff fe91 	bl	80006fc <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <LCD_DATA>
	LCD_DATA(y1);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff2c 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff26 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff21 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a06:	202c      	movs	r0, #44	@ 0x2c
 8000a08:	f7ff fe78 	bl	80006fc <LCD_CMD>
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a1c:	202c      	movs	r0, #44	@ 0x2c
 8000a1e:	f7ff fe6d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	481b      	ldr	r0, [pc, #108]	@ (8000a94 <LCD_Clear+0x80>)
 8000a28:	f001 fa30 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <LCD_Clear+0x84>)
 8000a32:	f001 fa2b 	bl	8001e8c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a36:	23ef      	movs	r3, #239	@ 0xef
 8000a38:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ffa8 	bl	8000994 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	e016      	b.n	8000a78 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e00d      	b.n	8000a6c <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fef6 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fef1 	bl	8000848 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2bef      	cmp	r3, #239	@ 0xef
 8000a70:	d9ee      	bls.n	8000a50 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a7e:	d3e4      	bcc.n	8000a4a <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <LCD_Clear+0x84>)
 8000a86:	f001 fa01 	bl	8001e8c <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000aaa:	202c      	movs	r0, #44	@ 0x2c
 8000aac:	f7ff fe26 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <FillRect+0xac>)
 8000ab6:	f001 f9e9 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <FillRect+0xb0>)
 8000ac0:	f001 f9e4 	bl	8001e8c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff58 	bl	8000994 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	fb02 f303 	mul.w	r3, r2, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	3b01      	subs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	e01a      	b.n	8000b2e <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e010      	b.n	8000b20 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe9f 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe9a 	bl	8000848 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	3b02      	subs	r3, #2
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8ea      	bhi.n	8000afe <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d8e0      	bhi.n	8000af8 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <FillRect+0xb0>)
 8000b3c:	f001 f9a6 	bl	8001e8c <HAL_GPIO_WritePin>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b54:	b093      	sub	sp, #76	@ 0x4c
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	466b      	mov	r3, sp
 8000b62:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d103      	bne.n	8000b72 <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d103      	bne.n	8000b80 <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d103      	bne.n	8000b8e <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000b86:	2320      	movs	r3, #32
 8000b88:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000b8a:	2332      	movs	r3, #50	@ 0x32
 8000b8c:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff fb38 	bl	8000204 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	1e4b      	subs	r3, r1, #1
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	4690      	mov	r8, r2
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4614      	mov	r4, r2
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	00eb      	lsls	r3, r5, #3
 8000bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd2:	00e2      	lsls	r2, r4, #3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	ebad 0d03 	sub.w	sp, sp, r3
 8000be0:	466b      	mov	r3, sp
 8000be2:	3300      	adds	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bea:	e00b      	b.n	8000c04 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	7819      	ldrb	r1, [r3, #0]
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bf8:	4413      	add	r3, r2
 8000bfa:	460a      	mov	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c00:	3301      	adds	r3, #1
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1ed      	bne.n	8000bec <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e077      	b.n	8000d06 <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000c20:	7efb      	ldrb	r3, [r7, #27]
 8000c22:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	483c      	ldr	r0, [pc, #240]	@ (8000d1c <LCD_Print+0x1cc>)
 8000c2a:	f001 f92f 	bl	8001e8c <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c32:	fb03 f202 	mul.w	r2, r3, r2
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c42:	fb03 f202 	mul.w	r2, r3, r2
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	441a      	add	r2, r3
 8000c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	461c      	mov	r4, r3
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c56:	4413      	add	r3, r2
 8000c58:	4622      	mov	r2, r4
 8000c5a:	f7ff fe9b 	bl	8000994 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c62:	e044      	b.n	8000cee <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10b      	bne.n	8000c82 <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3b20      	subs	r3, #32
 8000c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a29      	ldr	r2, [pc, #164]	@ (8000d20 <LCD_Print+0x1d0>)
 8000c7c:	4413      	add	r3, r2
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d10c      	bne.n	8000ca2 <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3b20      	subs	r3, #32
 8000c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <LCD_Print+0x1d4>)
 8000c9c:	4413      	add	r3, r2
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ca6:	e01b      	b.n	8000ce0 <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2201      	movs	r2, #1
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dd02      	ble.n	8000cc0 <LCD_Print+0x170>
					c = color;
 8000cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cbe:	e001      	b.n	8000cc4 <LCD_Print+0x174>
				} else {
					c = background;
 8000cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cc6:	121b      	asrs	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fdbc 	bl	8000848 <LCD_DATA>
				LCD_DATA(c);
 8000cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdb7 	bl	8000848 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	3301      	adds	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dadf      	bge.n	8000ca8 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cea:	3301      	adds	r3, #1
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbb6      	blt.n	8000c64 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4808      	ldr	r0, [pc, #32]	@ (8000d1c <LCD_Print+0x1cc>)
 8000cfc:	f001 f8c6 	bl	8001e8c <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	3301      	adds	r3, #1
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	db83      	blt.n	8000c16 <LCD_Print+0xc6>
 8000d0e:	46b5      	mov	sp, r6
	}
}
 8000d10:	bf00      	nop
 8000d12:	374c      	adds	r7, #76	@ 0x4c
 8000d14:	46bd      	mov	sp, r7
 8000d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	08002ac0 	.word	0x08002ac0
 8000d24:	08002f34 	.word	0x08002f34

08000d28 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000d36:	202c      	movs	r0, #44	@ 0x2c
 8000d38:	f7ff fce0 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <LCD_Bitmap+0xac>)
 8000d42:	f001 f8a3 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4823      	ldr	r0, [pc, #140]	@ (8000dd8 <LCD_Bitmap+0xb0>)
 8000d4c:	f001 f89e 	bl	8001e8c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe12 	bl	8000994 <SetWindows>
	unsigned int k = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	e01e      	b.n	8000db8 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e014      	b.n	8000daa <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd5d 	bl	8000848 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	3301      	adds	r3, #1
 8000d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd55 	bl	8000848 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	3302      	adds	r3, #2
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8e6      	bhi.n	8000d80 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	3301      	adds	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8dc      	bhi.n	8000d7a <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <LCD_Bitmap+0xb0>)
 8000dc6:	f001 f861 	bl	8001e8c <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400

08000ddc <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000dea:	202c      	movs	r0, #44	@ 0x2c
 8000dec:	f7ff fc86 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	484d      	ldr	r0, [pc, #308]	@ (8000f2c <LCD_Sprite+0x150>)
 8000df6:	f001 f849 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	484c      	ldr	r0, [pc, #304]	@ (8000f30 <LCD_Sprite+0x154>)
 8000e00:	f001 f844 	bl	8001e8c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f7ff fdb8 	bl	8000994 <SetWindows>
	int k = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000e32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03a      	beq.n	8000eb0 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3e:	e032      	b.n	8000ea6 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	fb03 f202 	mul.w	r2, r3, r2
 8000e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e64:	4413      	add	r3, r2
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6c:	e014      	b.n	8000e98 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fce6 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	3301      	adds	r3, #1
 8000e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcde 	bl	8000848 <LCD_DATA>
				k = k - 2;
 8000e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	3301      	adds	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbe6      	blt.n	8000e6e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbc8      	blt.n	8000e40 <LCD_Sprite+0x64>
 8000eae:	e034      	b.n	8000f1a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	e02d      	b.n	8000f12 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e014      	b.n	8000f04 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fcb0 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	3301      	adds	r3, #1
 8000eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fca8 	bl	8000848 <LCD_DATA>
				k = k + 2;
 8000ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efa:	3302      	adds	r3, #2
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbe6      	blt.n	8000eda <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3a      	ldr	r2, [r7, #32]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbcd      	blt.n	8000eb6 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <LCD_Sprite+0x154>)
 8000f20:	f000 ffb4 	bl	8001e8c <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	@ 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <moverPato.0>:
	int animFrame = 0;  // Frame inicial

	// Variable para controlar la dirección en la que está mirando el pato (1 = derecha, 0 = izquierda)
	int direccionDerecha = 1;  // Al principio, el pato está mirando hacia la derecha

	void moverPato() {
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af06      	add	r7, sp, #24
 8000f3a:	4664      	mov	r4, ip
 8000f3c:	f8c7 c004 	str.w	ip, [r7, #4]
	    while (1) {
	        // Borra la posición anterior del pato redibujando el fondo en esa área
	        LCD_Bitmap(coorX, coorY, patoWidth, patoHeight, fondo);
 8000f40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000f42:	4618      	mov	r0, r3
 8000f44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000f46:	4619      	mov	r1, r3
 8000f48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	6a23      	ldr	r3, [r4, #32]
 8000f4e:	461d      	mov	r5, r3
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <moverPato.0+0xc4>)
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	462b      	mov	r3, r5
 8000f56:	f7ff fee7 	bl	8000d28 <LCD_Bitmap>

	        // Actualiza las coordenadas del pato para moverlo
	        coorX += velocidadX;
 8000f5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000f5c:	69e3      	ldr	r3, [r4, #28]
 8000f5e:	4413      	add	r3, r2
 8000f60:	62e3      	str	r3, [r4, #44]	@ 0x2c
	        coorY += velocidadY;
 8000f62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f64:	69a3      	ldr	r3, [r4, #24]
 8000f66:	4413      	add	r3, r2
 8000f68:	62a3      	str	r3, [r4, #40]	@ 0x28

	        // Control de límites en el área azul
	        if (coorX >= limiteDerecho - patoWidth || coorX <= limiteIzquierdo) {
 8000f6a:	6962      	ldr	r2, [r4, #20]
 8000f6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000f72:	429a      	cmp	r2, r3
 8000f74:	da03      	bge.n	8000f7e <moverPato.0+0x4a>
 8000f76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000f78:	6923      	ldr	r3, [r4, #16]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dc09      	bgt.n	8000f92 <moverPato.0+0x5e>
	            velocidadX = -velocidadX;  // Cambia la dirección en X
 8000f7e:	69e3      	ldr	r3, [r4, #28]
 8000f80:	425b      	negs	r3, r3
 8000f82:	61e3      	str	r3, [r4, #28]

	            // Cambia la dirección visual del pato
	            direccionDerecha = !direccionDerecha;  // Invertir la dirección de la imagen (0 o 1)
 8000f84:	68e3      	ldr	r3, [r4, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	60e3      	str	r3, [r4, #12]
	        }

	        if (coorY >= limiteInferior - patoHeight || coorY <= limiteSuperior) {
 8000f92:	68a2      	ldr	r2, [r4, #8]
 8000f94:	6a23      	ldr	r3, [r4, #32]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	da03      	bge.n	8000fa6 <moverPato.0+0x72>
 8000f9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dc02      	bgt.n	8000fac <moverPato.0+0x78>
	            velocidadY = -velocidadY;  // Cambia la dirección en Y
 8000fa6:	69a3      	ldr	r3, [r4, #24]
 8000fa8:	425b      	negs	r3, r3
 8000faa:	61a3      	str	r3, [r4, #24]
	        }

	        // Actualiza el frame de la animación de aleteo (0, 1, 2)
	        animFrame = (animFrame + 1) % 3;
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	1c59      	adds	r1, r3, #1
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <moverPato.0+0xc8>)
 8000fb2:	fb83 3201 	smull	r3, r2, r3, r1
 8000fb6:	17cb      	asrs	r3, r1, #31
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	1aca      	subs	r2, r1, r3
 8000fc2:	6022      	str	r2, [r4, #0]

	        // Dibuja el sprite del pato en la nueva posición y frame de animación
	        // Si direccionDerecha es 1, mostramos el sprite normal, si es 0, lo invertimos horizontalmente
	        LCD_Sprite(coorX, coorY, patoWidth, patoHeight, Patos, 3, animFrame, direccionDerecha, 1);
 8000fc4:	68e3      	ldr	r3, [r4, #12]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000fca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000fcc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8000fce:	6a26      	ldr	r6, [r4, #32]
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	9203      	str	r2, [sp, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2303      	movs	r3, #3
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <moverPato.0+0xcc>)
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4633      	mov	r3, r6
 8000fe8:	462a      	mov	r2, r5
 8000fea:	f7ff fef7 	bl	8000ddc <LCD_Sprite>

	        // Pausa para controlar la velocidad del movimiento
	        HAL_Delay(50);  // Puedes ajustar el valor para cambiar la fluidez
 8000fee:	2032      	movs	r0, #50	@ 0x32
 8000ff0:	f000 fcae 	bl	8001950 <HAL_Delay>
	        LCD_Bitmap(coorX, coorY, patoWidth, patoHeight, fondo);
 8000ff4:	e7a4      	b.n	8000f40 <moverPato.0+0xc>
 8000ff6:	bf00      	nop
 8000ff8:	08049e8c 	.word	0x08049e8c
 8000ffc:	55555556 	.word	0x55555556
 8001000:	20000000 	.word	0x20000000

08001004 <main>:
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	@ 0x40
 8001008:	af02      	add	r7, sp, #8
int main(void)
 800100a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800100e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_Init();
 8001010:	f000 fc2c 	bl	800186c <HAL_Init>
  SystemClock_Config();
 8001014:	f000 fa1a 	bl	800144c <SystemClock_Config>
  MX_GPIO_Init();
 8001018:	f000 faba 	bl	8001590 <MX_GPIO_Init>
  MX_SPI1_Init();
 800101c:	f000 fa82 	bl	8001524 <MX_SPI1_Init>
	LCD_Init();
 8001020:	f7ff fa70 	bl	8000504 <LCD_Init>
	FillRect(0, 0, 320, 240, 0x00);
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	23f0      	movs	r3, #240	@ 0xf0
 800102a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fd33 	bl	8000a9c <FillRect>
	LCD_Bitmap(0, 0, 277, 270, menu); //Menu del juego
 8001036:	4bd5      	ldr	r3, [pc, #852]	@ (800138c <main+0x388>)
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800103e:	f240 1215 	movw	r2, #277	@ 0x115
 8001042:	2100      	movs	r1, #0
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fe6f 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(2000);  // 2000 milisegundos = 2 segundos
 800104a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800104e:	f000 fc7f 	bl	8001950 <HAL_Delay>
	LCD_Clear(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fcde 	bl	8000a14 <LCD_Clear>
	LCD_Bitmap(50, 0, 250, 216, selecion);  // Esto solo es un iciono para mostrar donde esta tocadno
 8001058:	4bcd      	ldr	r3, [pc, #820]	@ (8001390 <main+0x38c>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	23d8      	movs	r3, #216	@ 0xd8
 800105e:	22fa      	movs	r2, #250	@ 0xfa
 8001060:	2100      	movs	r1, #0
 8001062:	2032      	movs	r0, #50	@ 0x32
 8001064:	f7ff fe60 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(100,125,11,7,flecha);
 8001068:	4bca      	ldr	r3, [pc, #808]	@ (8001394 <main+0x390>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2307      	movs	r3, #7
 800106e:	220b      	movs	r2, #11
 8001070:	217d      	movs	r1, #125	@ 0x7d
 8001072:	2064      	movs	r0, #100	@ 0x64
 8001074:	f7ff fe58 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(100,140,11,7,flecha);
 8001078:	4bc6      	ldr	r3, [pc, #792]	@ (8001394 <main+0x390>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2307      	movs	r3, #7
 800107e:	220b      	movs	r2, #11
 8001080:	218c      	movs	r1, #140	@ 0x8c
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f7ff fe50 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(2000);  // 2000 milisegundos = 2 segundos
 8001088:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800108c:	f000 fc60 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001090:	4bc1      	ldr	r3, [pc, #772]	@ (8001398 <main+0x394>)
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	23f0      	movs	r3, #240	@ 0xf0
 8001096:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe43 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(105, 143, 54, 46, dog_3);  // Dibuja el primer frame del perro
 80010a2:	4bbe      	ldr	r3, [pc, #760]	@ (800139c <main+0x398>)
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	232e      	movs	r3, #46	@ 0x2e
 80010a8:	2236      	movs	r2, #54	@ 0x36
 80010aa:	218f      	movs	r1, #143	@ 0x8f
 80010ac:	2069      	movs	r0, #105	@ 0x69
 80010ae:	f7ff fe3b 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f000 fc4c 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80010b8:	4bb7      	ldr	r3, [pc, #732]	@ (8001398 <main+0x394>)
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	23f0      	movs	r3, #240	@ 0xf0
 80010be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010c2:	2100      	movs	r1, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff fe2f 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(109, 147, 57, 42, dog_4);  // Dibuja el segundo frame
 80010ca:	4bb5      	ldr	r3, [pc, #724]	@ (80013a0 <main+0x39c>)
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	232a      	movs	r3, #42	@ 0x2a
 80010d0:	2239      	movs	r2, #57	@ 0x39
 80010d2:	2193      	movs	r1, #147	@ 0x93
 80010d4:	206d      	movs	r0, #109	@ 0x6d
 80010d6:	f7ff fe27 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 fc38 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80010e0:	4bad      	ldr	r3, [pc, #692]	@ (8001398 <main+0x394>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	23f0      	movs	r3, #240	@ 0xf0
 80010e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010ea:	2100      	movs	r1, #0
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fe1b 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(113, 147, 57, 42, dog_5);  // Dibuja el tercer frame
 80010f2:	4bac      	ldr	r3, [pc, #688]	@ (80013a4 <main+0x3a0>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	232a      	movs	r3, #42	@ 0x2a
 80010f8:	2239      	movs	r2, #57	@ 0x39
 80010fa:	2193      	movs	r1, #147	@ 0x93
 80010fc:	2071      	movs	r0, #113	@ 0x71
 80010fe:	f7ff fe13 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 8001102:	2005      	movs	r0, #5
 8001104:	f000 fc24 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001108:	4ba3      	ldr	r3, [pc, #652]	@ (8001398 <main+0x394>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	23f0      	movs	r3, #240	@ 0xf0
 800110e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe07 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(117, 147, 57, 42, dog_4);  // Dibuja el cuarto frame
 800111a:	4ba1      	ldr	r3, [pc, #644]	@ (80013a0 <main+0x39c>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	232a      	movs	r3, #42	@ 0x2a
 8001120:	2239      	movs	r2, #57	@ 0x39
 8001122:	2193      	movs	r1, #147	@ 0x93
 8001124:	2075      	movs	r0, #117	@ 0x75
 8001126:	f7ff fdff 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 800112a:	2005      	movs	r0, #5
 800112c:	f000 fc10 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001130:	4b99      	ldr	r3, [pc, #612]	@ (8001398 <main+0x394>)
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	23f0      	movs	r3, #240	@ 0xf0
 8001136:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fdf3 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(121, 147, 57, 42, dog_5);  // Dibuja el quinto frame
 8001142:	4b98      	ldr	r3, [pc, #608]	@ (80013a4 <main+0x3a0>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	232a      	movs	r3, #42	@ 0x2a
 8001148:	2239      	movs	r2, #57	@ 0x39
 800114a:	2193      	movs	r1, #147	@ 0x93
 800114c:	2079      	movs	r0, #121	@ 0x79
 800114e:	f7ff fdeb 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f000 fbfc 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001158:	4b8f      	ldr	r3, [pc, #572]	@ (8001398 <main+0x394>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	23f0      	movs	r3, #240	@ 0xf0
 800115e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001162:	2100      	movs	r1, #0
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fddf 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(125, 147, 57, 42, dog_4);  // Dibuja el sexto frame
 800116a:	4b8d      	ldr	r3, [pc, #564]	@ (80013a0 <main+0x39c>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	232a      	movs	r3, #42	@ 0x2a
 8001170:	2239      	movs	r2, #57	@ 0x39
 8001172:	2193      	movs	r1, #147	@ 0x93
 8001174:	207d      	movs	r0, #125	@ 0x7d
 8001176:	f7ff fdd7 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 800117a:	2005      	movs	r0, #5
 800117c:	f000 fbe8 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001180:	4b85      	ldr	r3, [pc, #532]	@ (8001398 <main+0x394>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	23f0      	movs	r3, #240	@ 0xf0
 8001186:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fdcb 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(129, 147, 57, 42, dog_5);  // Dibuja el séptimo frame
 8001192:	4b84      	ldr	r3, [pc, #528]	@ (80013a4 <main+0x3a0>)
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	232a      	movs	r3, #42	@ 0x2a
 8001198:	2239      	movs	r2, #57	@ 0x39
 800119a:	2193      	movs	r1, #147	@ 0x93
 800119c:	2081      	movs	r0, #129	@ 0x81
 800119e:	f7ff fdc3 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 80011a2:	2005      	movs	r0, #5
 80011a4:	f000 fbd4 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80011a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001398 <main+0x394>)
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	23f0      	movs	r3, #240	@ 0xf0
 80011ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdb7 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(132, 142, 57, 53, dog_6);  // Dibuja el perro saltando
 80011ba:	4b7b      	ldr	r3, [pc, #492]	@ (80013a8 <main+0x3a4>)
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2335      	movs	r3, #53	@ 0x35
 80011c0:	2239      	movs	r2, #57	@ 0x39
 80011c2:	218e      	movs	r1, #142	@ 0x8e
 80011c4:	2084      	movs	r0, #132	@ 0x84
 80011c6:	f7ff fdaf 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f000 fbc0 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80011d0:	4b71      	ldr	r3, [pc, #452]	@ (8001398 <main+0x394>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	23f0      	movs	r3, #240	@ 0xf0
 80011d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fda3 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(136, 122, 37, 48, dog_7);  // Dibuja el siguiente frame del salto
 80011e2:	4b72      	ldr	r3, [pc, #456]	@ (80013ac <main+0x3a8>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2330      	movs	r3, #48	@ 0x30
 80011e8:	2225      	movs	r2, #37	@ 0x25
 80011ea:	217a      	movs	r1, #122	@ 0x7a
 80011ec:	2088      	movs	r0, #136	@ 0x88
 80011ee:	f7ff fd9b 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f000 fbac 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80011f8:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <main+0x394>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	23f0      	movs	r3, #240	@ 0xf0
 80011fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fd8f 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(150, 114, 37, 48, dog_8);  // Dibuja el siguiente frame del salto
 800120a:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <main+0x3ac>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2330      	movs	r3, #48	@ 0x30
 8001210:	2225      	movs	r2, #37	@ 0x25
 8001212:	2172      	movs	r1, #114	@ 0x72
 8001214:	2096      	movs	r0, #150	@ 0x96
 8001216:	f7ff fd87 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 800121a:	2005      	movs	r0, #5
 800121c:	f000 fb98 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001220:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <main+0x394>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	23f0      	movs	r3, #240	@ 0xf0
 8001226:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800122a:	2100      	movs	r1, #0
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fd7b 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(175, 132, 33, 33, dog_9);  // Dibuja el perro aterrizando
 8001232:	4b60      	ldr	r3, [pc, #384]	@ (80013b4 <main+0x3b0>)
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2321      	movs	r3, #33	@ 0x21
 8001238:	2221      	movs	r2, #33	@ 0x21
 800123a:	2184      	movs	r1, #132	@ 0x84
 800123c:	20af      	movs	r0, #175	@ 0xaf
 800123e:	f7ff fd73 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(5);
 8001242:	2005      	movs	r0, #5
 8001244:	f000 fb84 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <main+0x394>)
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	23f0      	movs	r3, #240	@ 0xf0
 800124e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001252:	2100      	movs	r1, #0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fd67 	bl	8000d28 <LCD_Bitmap>
	HAL_Delay(1000);  // Pausa antes de mostrar la ronda
 800125a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800125e:	f000 fb77 	bl	8001950 <HAL_Delay>
	FillRect(0, 0, 100, 40,  0x559D);  // Rellena la pantalla con color celeste
 8001262:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2328      	movs	r3, #40	@ 0x28
 800126a:	2264      	movs	r2, #100	@ 0x64
 800126c:	2100      	movs	r1, #0
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fc14 	bl	8000a9c <FillRect>
	LCD_Print("    Estas Listo!", 20, 80, 2, 0x0000,  0x559D);  // Texto negro con fondo celeste
 8001274:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	2250      	movs	r2, #80	@ 0x50
 8001282:	2114      	movs	r1, #20
 8001284:	484c      	ldr	r0, [pc, #304]	@ (80013b8 <main+0x3b4>)
 8001286:	f7ff fc63 	bl	8000b50 <LCD_Print>
	HAL_Delay(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128e:	f000 fb5f 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <main+0x394>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	23f0      	movs	r3, #240	@ 0xf0
 8001298:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff fd42 	bl	8000d28 <LCD_Bitmap>
	FillRect(0, 0, 100, 40, 0x559D);  // Área donde aparece el número
 80012a4:	f245 539d 	movw	r3, #21917	@ 0x559d
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2328      	movs	r3, #40	@ 0x28
 80012ac:	2264      	movs	r2, #100	@ 0x64
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fbf3 	bl	8000a9c <FillRect>
	LCD_Print("3", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 80012b6:	f245 539d 	movw	r3, #21917	@ 0x559d
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2302      	movs	r3, #2
 80012c2:	2250      	movs	r2, #80	@ 0x50
 80012c4:	2196      	movs	r1, #150	@ 0x96
 80012c6:	483d      	ldr	r0, [pc, #244]	@ (80013bc <main+0x3b8>)
 80012c8:	f7ff fc42 	bl	8000b50 <LCD_Print>
	HAL_Delay(1000);  // Pausa de 1 segundo
 80012cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d0:	f000 fb3e 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 80012d4:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <main+0x394>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	23f0      	movs	r3, #240	@ 0xf0
 80012da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012de:	2100      	movs	r1, #0
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fd21 	bl	8000d28 <LCD_Bitmap>
	FillRect(0, 0, 100, 40, 0x559D);  // Área donde aparece el número
 80012e6:	f245 539d 	movw	r3, #21917	@ 0x559d
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2328      	movs	r3, #40	@ 0x28
 80012ee:	2264      	movs	r2, #100	@ 0x64
 80012f0:	2100      	movs	r1, #0
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fbd2 	bl	8000a9c <FillRect>
	LCD_Print("2", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 80012f8:	f245 539d 	movw	r3, #21917	@ 0x559d
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2302      	movs	r3, #2
 8001304:	2250      	movs	r2, #80	@ 0x50
 8001306:	2196      	movs	r1, #150	@ 0x96
 8001308:	482d      	ldr	r0, [pc, #180]	@ (80013c0 <main+0x3bc>)
 800130a:	f7ff fc21 	bl	8000b50 <LCD_Print>
	HAL_Delay(1000);  // Pausa de 1 segundo
 800130e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001312:	f000 fb1d 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <main+0x394>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	23f0      	movs	r3, #240	@ 0xf0
 800131c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001320:	2100      	movs	r1, #0
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd00 	bl	8000d28 <LCD_Bitmap>
	FillRect(0, 0, 100, 40, 0x559D);  // Área donde aparece el número
 8001328:	f245 539d 	movw	r3, #21917	@ 0x559d
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2328      	movs	r3, #40	@ 0x28
 8001330:	2264      	movs	r2, #100	@ 0x64
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fbb1 	bl	8000a9c <FillRect>
	LCD_Print("1", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 800133a:	f245 539d 	movw	r3, #21917	@ 0x559d
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	2250      	movs	r2, #80	@ 0x50
 8001348:	2196      	movs	r1, #150	@ 0x96
 800134a:	481e      	ldr	r0, [pc, #120]	@ (80013c4 <main+0x3c0>)
 800134c:	f7ff fc00 	bl	8000b50 <LCD_Print>
	HAL_Delay(1000);  // Pausa de 1 segundo
 8001350:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001354:	f000 fafc 	bl	8001950 <HAL_Delay>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <main+0x394>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	23f0      	movs	r3, #240	@ 0xf0
 800135e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001362:	2100      	movs	r1, #0
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fcdf 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(120, 220, 9, 9, Ronda);
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <main+0x3c4>)
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2309      	movs	r3, #9
 8001370:	2209      	movs	r2, #9
 8001372:	21dc      	movs	r1, #220	@ 0xdc
 8001374:	2078      	movs	r0, #120	@ 0x78
 8001376:	f7ff fcd7 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(132, 220, 9, 9, Ronda);
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <main+0x3c4>)
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2309      	movs	r3, #9
 8001380:	2209      	movs	r2, #9
 8001382:	21dc      	movs	r1, #220	@ 0xdc
 8001384:	2084      	movs	r0, #132	@ 0x84
 8001386:	f7ff fccf 	bl	8000d28 <LCD_Bitmap>
 800138a:	e01f      	b.n	80013cc <main+0x3c8>
 800138c:	08025640 	.word	0x08025640
 8001390:	0800b060 	.word	0x0800b060
 8001394:	0800afc4 	.word	0x0800afc4
 8001398:	08049e8c 	.word	0x08049e8c
 800139c:	08003b14 	.word	0x08003b14
 80013a0:	08004e7c 	.word	0x08004e7c
 80013a4:	08006130 	.word	0x08006130
 80013a8:	080073e4 	.word	0x080073e4
 80013ac:	08008b80 	.word	0x08008b80
 80013b0:	08009960 	.word	0x08009960
 80013b4:	0800a740 	.word	0x0800a740
 80013b8:	08002aa0 	.word	0x08002aa0
 80013bc:	08002ab4 	.word	0x08002ab4
 80013c0:	08002ab8 	.word	0x08002ab8
 80013c4:	08002abc 	.word	0x08002abc
 80013c8:	20001514 	.word	0x20001514
	LCD_Bitmap(144, 220, 9, 9, Ronda);
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <main+0x444>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2309      	movs	r3, #9
 80013d2:	2209      	movs	r2, #9
 80013d4:	21dc      	movs	r1, #220	@ 0xdc
 80013d6:	2090      	movs	r0, #144	@ 0x90
 80013d8:	f7ff fca6 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(156, 220, 9, 9, Ronda);
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <main+0x444>)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2309      	movs	r3, #9
 80013e2:	2209      	movs	r2, #9
 80013e4:	21dc      	movs	r1, #220	@ 0xdc
 80013e6:	209c      	movs	r0, #156	@ 0x9c
 80013e8:	f7ff fc9e 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(168, 220, 9, 9, Ronda);
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <main+0x444>)
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2309      	movs	r3, #9
 80013f2:	2209      	movs	r2, #9
 80013f4:	21dc      	movs	r1, #220	@ 0xdc
 80013f6:	20a8      	movs	r0, #168	@ 0xa8
 80013f8:	f7ff fc96 	bl	8000d28 <LCD_Bitmap>
	LCD_Bitmap(180, 220, 9, 9, Ronda);
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <main+0x444>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2309      	movs	r3, #9
 8001402:	2209      	movs	r2, #9
 8001404:	21dc      	movs	r1, #220	@ 0xdc
 8001406:	20b4      	movs	r0, #180	@ 0xb4
 8001408:	f7ff fc8e 	bl	8000d28 <LCD_Bitmap>
	int coorX = 100;  // Posición inicial X del pato
 800140c:	2364      	movs	r3, #100	@ 0x64
 800140e:	633b      	str	r3, [r7, #48]	@ 0x30
	int coorY = 60;   // Posición inicial Y del pato
 8001410:	233c      	movs	r3, #60	@ 0x3c
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int patoWidth = 29;  // Ancho del sprite
 8001414:	231d      	movs	r3, #29
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
	int patoHeight = 31; // Alto del sprite
 8001418:	231f      	movs	r3, #31
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
	int limiteSuperior = 0;      // Límite superior (Y mínimo)
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
	int limiteInferior = 140;    // Límite inferior (Y máximo, hasta donde está el área azul)
 8001420:	238c      	movs	r3, #140	@ 0x8c
 8001422:	60fb      	str	r3, [r7, #12]
	int limiteIzquierdo = 0;     // Límite izquierdo (X mínimo)
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
	int limiteDerecho = 320;     // Límite derecho (X máximo, ancho total de la pantalla)
 8001428:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800142c:	61bb      	str	r3, [r7, #24]
	int velocidadX = 1;  // Velocidad en el eje X
 800142e:	2301      	movs	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
	int velocidadY = 1;  // Velocidad en el eje Y
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
	int animFrame = 0;  // Frame inicial
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
	int direccionDerecha = 1;  // Al principio, el pato está mirando hacia la derecha
 800143a:	2301      	movs	r3, #1
 800143c:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		moverPato();  // Llamar a la función para mover el pato
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	469c      	mov	ip, r3
 8001442:	f7ff fd77 	bl	8000f34 <moverPato.0>
 8001446:	e7fa      	b.n	800143e <main+0x43a>
 8001448:	20001514 	.word	0x20001514

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fae7 	bl	8002a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <SystemClock_Config+0xd0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a28      	ldr	r2, [pc, #160]	@ (800151c <SystemClock_Config+0xd0>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <SystemClock_Config+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <SystemClock_Config+0xd4>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SystemClock_Config+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014c4:	2350      	movs	r3, #80	@ 0x50
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 ff81 	bl	80023e0 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e4:	f000 f8e0 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2102      	movs	r1, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fcdb 	bl	8001ec0 <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001510:	f000 f8ca 	bl	80016a8 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3750      	adds	r7, #80	@ 0x50
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI1_Init+0x64>)
 800152a:	4a18      	ldr	r2, [pc, #96]	@ (800158c <MX_SPI1_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001554:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001570:	220a      	movs	r2, #10
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001576:	f001 f9d1 	bl	800291c <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001580:	f000 f892 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200015e0 	.word	0x200015e0
 800158c:	40013000 	.word	0x40013000

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a33      	ldr	r2, [pc, #204]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <MX_GPIO_Init+0x108>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <MX_GPIO_Init+0x108>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <MX_GPIO_Init+0x108>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <MX_GPIO_Init+0x108>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2182      	movs	r1, #130	@ 0x82
 800161a:	4820      	ldr	r0, [pc, #128]	@ (800169c <MX_GPIO_Init+0x10c>)
 800161c:	f000 fc36 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001620:	2200      	movs	r2, #0
 8001622:	f240 7113 	movw	r1, #1811	@ 0x713
 8001626:	481e      	ldr	r0, [pc, #120]	@ (80016a0 <MX_GPIO_Init+0x110>)
 8001628:	f000 fc30 	bl	8001e8c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800162c:	2200      	movs	r2, #0
 800162e:	f240 4179 	movw	r1, #1145	@ 0x479
 8001632:	481c      	ldr	r0, [pc, #112]	@ (80016a4 <MX_GPIO_Init+0x114>)
 8001634:	f000 fc2a 	bl	8001e8c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001638:	2382      	movs	r3, #130	@ 0x82
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4813      	ldr	r0, [pc, #76]	@ (800169c <MX_GPIO_Init+0x10c>)
 8001650:	f000 fa88 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001654:	f240 7313 	movw	r3, #1811	@ 0x713
 8001658:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2302      	movs	r3, #2
 8001664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <MX_GPIO_Init+0x110>)
 800166e:	f000 fa79 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001672:	f240 4379 	movw	r3, #1145	@ 0x479
 8001676:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <MX_GPIO_Init+0x114>)
 800168c:	f000 fa6a 	bl	8001b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_SPI_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_SPI_MspInit+0x88>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_SPI_MspInit+0x88>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001734:	6453      	str	r3, [r2, #68]	@ 0x44
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_SPI_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_SPI_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_SPI_MspInit+0x88>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_SPI_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23e0      	movs	r3, #224	@ 0xe0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176e:	2305      	movs	r3, #5
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_SPI_MspInit+0x8c>)
 800177a:	f000 f9f3 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40013000 	.word	0x40013000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f891 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
 8001826:	2300      	movs	r3, #0
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:
 800182a:	58d4      	ldr	r4, [r2, r3]
 800182c:	50c4      	str	r4, [r0, r3]
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:
 8001830:	18c4      	adds	r4, r0, r3
 8001832:	428c      	cmp	r4, r1
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
 800183a:	2300      	movs	r3, #0
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:
 8001842:	42a2      	cmp	r2, r4
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>
 8001846:	f001 f8fb 	bl	8002a40 <__libc_init_array>
 800184a:	f7ff fbdb 	bl	8001004 <main>
 800184e:	4770      	bx	lr
 8001850:	20020000 	.word	0x20020000
 8001854:	20000000 	.word	0x20000000
 8001858:	200015c4 	.word	0x200015c4
 800185c:	0806f6ac 	.word	0x0806f6ac
 8001860:	200015c4 	.word	0x200015c4
 8001864:	2000163c 	.word	0x2000163c

08001868 <ADC_IRQHandler>:
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f931 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff ff08 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f93b 	bl	8001b4a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f911 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200015b8 	.word	0x200015b8
 8001908:	200015c0 	.word	0x200015c0
 800190c:	200015bc 	.word	0x200015bc

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200015c0 	.word	0x200015c0
 8001934:	20001638 	.word	0x20001638

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20001638 	.word	0x20001638

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200015c0 	.word	0x200015c0

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff47 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff5c 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffb0 	bl	8001ab8 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e165      	b.n	8001e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8154 	bne.w	8001e46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ae 	beq.w	8001e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e6c <HAL_GPIO_Init+0x308>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d025      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_GPIO_Init+0x310>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x314>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e7c <HAL_GPIO_Init+0x318>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	@ (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x320>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x202>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e00c      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00a      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e40:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f ae96 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0cc      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b68      	ldr	r3, [pc, #416]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d90c      	bls.n	8001efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2c:	4b53      	ldr	r3, [pc, #332]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	494d      	ldr	r1, [pc, #308]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d044      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06f      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e067      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b37      	ldr	r3, [pc, #220]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4934      	ldr	r1, [pc, #208]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff fcc2 	bl	8001938 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff fcbe 	bl	8001938 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e04f      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d20c      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e032      	b.n	800206e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4916      	ldr	r1, [pc, #88]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490e      	ldr	r1, [pc, #56]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002046:	f000 f821 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	490a      	ldr	r1, [pc, #40]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	5ccb      	ldrb	r3, [r1, r3]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_ClockConfig+0x1c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc22 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023c00 	.word	0x40023c00
 800207c:	40023800 	.word	0x40023800
 8002080:	0806f68c 	.word	0x0806f68c
 8002084:	200015b8 	.word	0x200015b8
 8002088:	200015bc 	.word	0x200015bc

0800208c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002090:	b0a6      	sub	sp, #152	@ 0x98
 8002092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b2:	4bc8      	ldr	r3, [pc, #800]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	f200 817e 	bhi.w	80023bc <HAL_RCC_GetSysClockFreq+0x330>
 80020c0:	a201      	add	r2, pc, #4	@ (adr r2, 80020c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	080023bd 	.word	0x080023bd
 80020d0:	080023bd 	.word	0x080023bd
 80020d4:	080023bd 	.word	0x080023bd
 80020d8:	08002105 	.word	0x08002105
 80020dc:	080023bd 	.word	0x080023bd
 80020e0:	080023bd 	.word	0x080023bd
 80020e4:	080023bd 	.word	0x080023bd
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	080023bd 	.word	0x080023bd
 80020f0:	080023bd 	.word	0x080023bd
 80020f4:	080023bd 	.word	0x080023bd
 80020f8:	08002277 	.word	0x08002277
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4bb6      	ldr	r3, [pc, #728]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80020fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002102:	e15f      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4bb5      	ldr	r3, [pc, #724]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x350>)
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800210a:	e15b      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4bb1      	ldr	r3, [pc, #708]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002118:	4bae      	ldr	r3, [pc, #696]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	4bab      	ldr	r3, [pc, #684]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	2200      	movs	r2, #0
 800212c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800212e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	663b      	str	r3, [r7, #96]	@ 0x60
 8002138:	2300      	movs	r3, #0
 800213a:	667b      	str	r3, [r7, #100]	@ 0x64
 800213c:	4ba7      	ldr	r3, [pc, #668]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x350>)
 800213e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002142:	462a      	mov	r2, r5
 8002144:	fb03 f202 	mul.w	r2, r3, r2
 8002148:	2300      	movs	r3, #0
 800214a:	4621      	mov	r1, r4
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	4aa2      	ldr	r2, [pc, #648]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x350>)
 8002154:	4621      	mov	r1, r4
 8002156:	fba1 1202 	umull	r1, r2, r1, r2
 800215a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800215c:	460a      	mov	r2, r1
 800215e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002160:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002162:	4413      	add	r3, r2
 8002164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800216a:	2200      	movs	r2, #0
 800216c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800216e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002174:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002178:	f7fe f84c 	bl	8000214 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002186:	e064      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	653b      	str	r3, [r7, #80]	@ 0x50
 8002192:	657a      	str	r2, [r7, #84]	@ 0x54
 8002194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800219c:	2300      	movs	r3, #0
 800219e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80021a4:	4622      	mov	r2, r4
 80021a6:	462b      	mov	r3, r5
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0159      	lsls	r1, r3, #5
 80021b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b6:	0150      	lsls	r0, r2, #5
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4621      	mov	r1, r4
 80021be:	1a51      	subs	r1, r2, r1
 80021c0:	6139      	str	r1, [r7, #16]
 80021c2:	4629      	mov	r1, r5
 80021c4:	eb63 0301 	sbc.w	r3, r3, r1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021d6:	4659      	mov	r1, fp
 80021d8:	018b      	lsls	r3, r1, #6
 80021da:	4651      	mov	r1, sl
 80021dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021e0:	4651      	mov	r1, sl
 80021e2:	018a      	lsls	r2, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ebb2 0801 	subs.w	r8, r2, r1
 80021ea:	4659      	mov	r1, fp
 80021ec:	eb63 0901 	sbc.w	r9, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002200:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002204:	4690      	mov	r8, r2
 8002206:	4699      	mov	r9, r3
 8002208:	4623      	mov	r3, r4
 800220a:	eb18 0303 	adds.w	r3, r8, r3
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	462b      	mov	r3, r5
 8002212:	eb49 0303 	adc.w	r3, r9, r3
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002224:	4629      	mov	r1, r5
 8002226:	028b      	lsls	r3, r1, #10
 8002228:	4621      	mov	r1, r4
 800222a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800222e:	4621      	mov	r1, r4
 8002230:	028a      	lsls	r2, r1, #10
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800223a:	2200      	movs	r2, #0
 800223c:	643b      	str	r3, [r7, #64]	@ 0x40
 800223e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002240:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002244:	f7fd ffe6 	bl	8000214 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002252:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	3301      	adds	r3, #1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8002264:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002274:	e0a6      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002276:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800227e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002282:	4b54      	ldr	r3, [pc, #336]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02a      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228e:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	099b      	lsrs	r3, r3, #6
 8002294:	2200      	movs	r2, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002298:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022a0:	2100      	movs	r1, #0
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x350>)
 80022a4:	fb03 f201 	mul.w	r2, r3, r1
 80022a8:	2300      	movs	r3, #0
 80022aa:	fb00 f303 	mul.w	r3, r0, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	4a4a      	ldr	r2, [pc, #296]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x350>)
 80022b2:	fba0 1202 	umull	r1, r2, r0, r2
 80022b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80022b8:	460a      	mov	r2, r1
 80022ba:	673a      	str	r2, [r7, #112]	@ 0x70
 80022bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80022be:	4413      	add	r3, r2
 80022c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80022c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c6:	2200      	movs	r2, #0
 80022c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80022cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80022d4:	f7fd ff9e 	bl	8000214 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4613      	mov	r3, r2
 80022de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022e2:	e05b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	2200      	movs	r2, #0
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0159      	lsls	r1, r3, #5
 800230e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002312:	0150      	lsls	r0, r2, #5
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4641      	mov	r1, r8
 800231a:	ebb2 0a01 	subs.w	sl, r2, r1
 800231e:	4649      	mov	r1, r9
 8002320:	eb63 0b01 	sbc.w	fp, r3, r1
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002338:	ebb2 040a 	subs.w	r4, r2, sl
 800233c:	eb63 050b 	sbc.w	r5, r3, fp
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	00eb      	lsls	r3, r5, #3
 800234a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234e:	00e2      	lsls	r2, r4, #3
 8002350:	4614      	mov	r4, r2
 8002352:	461d      	mov	r5, r3
 8002354:	4643      	mov	r3, r8
 8002356:	18e3      	adds	r3, r4, r3
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	464b      	mov	r3, r9
 800235c:	eb45 0303 	adc.w	r3, r5, r3
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236e:	4629      	mov	r1, r5
 8002370:	028b      	lsls	r3, r1, #10
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002378:	4621      	mov	r1, r4
 800237a:	028a      	lsls	r2, r1, #10
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002384:	2200      	movs	r2, #0
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	61fa      	str	r2, [r7, #28]
 800238a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800238e:	f7fd ff41 	bl	8000214 <__aeabi_uldivmod>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4613      	mov	r3, r2
 8002398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0f1b      	lsrs	r3, r3, #28
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80023aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023ba:	e003      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80023be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3798      	adds	r7, #152	@ 0x98
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	017d7840 	.word	0x017d7840

080023e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e28d      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8083 	beq.w	8002506 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002400:	4b94      	ldr	r3, [pc, #592]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b04      	cmp	r3, #4
 800240a:	d019      	beq.n	8002440 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800240c:	4b91      	ldr	r3, [pc, #580]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002414:	2b08      	cmp	r3, #8
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002418:	4b8e      	ldr	r3, [pc, #568]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002424:	d00c      	beq.n	8002440 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b84      	ldr	r3, [pc, #528]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05b      	beq.n	8002504 <HAL_RCC_OscConfig+0x124>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d157      	bne.n	8002504 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e25a      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x90>
 8002462:	4b7c      	ldr	r3, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7b      	ldr	r2, [pc, #492]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xcc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0xb4>
 800247a:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a75      	ldr	r2, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a72      	ldr	r2, [pc, #456]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xcc>
 8002494:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fa40 	bl	8001938 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fa3c 	bl	8001938 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e21f      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xdc>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa2c 	bl	8001938 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fa28 	bl	8001938 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e20b      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b57      	ldr	r3, [pc, #348]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x104>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d06f      	beq.n	80025f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002512:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d017      	beq.n	800254e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800251e:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d105      	bne.n	8002536 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x186>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1d3      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x278>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff f9d5 	bl	8001938 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff f9d1 	bl	8001938 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1b4      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4925      	ldr	r1, [pc, #148]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCC_OscConfig+0x278>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f9b4 	bl	8001938 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff f9b0 	bl	8001938 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e193      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x27c>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f994 	bl	8001938 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff f990 	bl	8001938 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e173      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x234>
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x27c>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7ff f97d 	bl	8001938 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e00e      	b.n	8002660 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff f979 	bl	8001938 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d907      	bls.n	8002660 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e15c      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b8a      	ldr	r3, [pc, #552]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ea      	bne.n	8002642 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8097 	beq.w	80027a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b83      	ldr	r3, [pc, #524]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b7f      	ldr	r3, [pc, #508]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a7e      	ldr	r2, [pc, #504]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b79      	ldr	r3, [pc, #484]	@ (8002890 <HAL_RCC_OscConfig+0x4b0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b76      	ldr	r3, [pc, #472]	@ (8002890 <HAL_RCC_OscConfig+0x4b0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a75      	ldr	r2, [pc, #468]	@ (8002890 <HAL_RCC_OscConfig+0x4b0>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7ff f939 	bl	8001938 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff f935 	bl	8001938 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e118      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002890 <HAL_RCC_OscConfig+0x4b0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x31e>
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x358>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x340>
 8002706:	4b61      	ldr	r3, [pc, #388]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	4a60      	ldr	r2, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6713      	str	r3, [r2, #112]	@ 0x70
 8002712:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x358>
 8002720:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a59      	ldr	r2, [pc, #356]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b57      	ldr	r3, [pc, #348]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a56      	ldr	r2, [pc, #344]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7ff f8fa 	bl	8001938 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7ff f8f6 	bl	8001938 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0d7      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ee      	beq.n	8002748 <HAL_RCC_OscConfig+0x368>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff f8e4 	bl	8001938 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff f8e0 	bl	8001938 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0c1      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	4b40      	ldr	r3, [pc, #256]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ee      	bne.n	8002774 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b3b      	ldr	r3, [pc, #236]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a3a      	ldr	r2, [pc, #232]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80ad 	beq.w	800290c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d060      	beq.n	8002880 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d145      	bne.n	8002852 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCC_OscConfig+0x4b4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f8b4 	bl	8001938 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f8b0 	bl	8001938 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e093      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	071b      	lsls	r3, r3, #28
 800281e:	491b      	ldr	r1, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x4b4>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff f885 	bl	8001938 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7ff f881 	bl	8001938 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e064      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x452>
 8002850:	e05c      	b.n	800290c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCC_OscConfig+0x4b4>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f86e 	bl	8001938 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff f86a 	bl	8001938 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e04d      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x4ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x480>
 800287e:	e045      	b.n	800290c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e040      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b1f      	ldr	r3, [pc, #124]	@ (8002918 <HAL_RCC_OscConfig+0x538>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d030      	beq.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d129      	bne.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d122      	bne.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d119      	bne.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d10f      	bne.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07b      	b.n	8002a26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293e:	d009      	beq.n	8002954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
 8002946:	e005      	b.n	8002954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fec8 	bl	8001704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800298a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d8:	ea42 0103 	orr.w	r1, r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0104 	and.w	r1, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	f003 0210 	and.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <memset>:
 8002a2e:	4402      	add	r2, r0
 8002a30:	4603      	mov	r3, r0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d100      	bne.n	8002a38 <memset+0xa>
 8002a36:	4770      	bx	lr
 8002a38:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3c:	e7f9      	b.n	8002a32 <memset+0x4>
	...

08002a40 <__libc_init_array>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4d0d      	ldr	r5, [pc, #52]	@ (8002a78 <__libc_init_array+0x38>)
 8002a44:	4c0d      	ldr	r4, [pc, #52]	@ (8002a7c <__libc_init_array+0x3c>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	42a6      	cmp	r6, r4
 8002a4e:	d109      	bne.n	8002a64 <__libc_init_array+0x24>
 8002a50:	4d0b      	ldr	r5, [pc, #44]	@ (8002a80 <__libc_init_array+0x40>)
 8002a52:	4c0c      	ldr	r4, [pc, #48]	@ (8002a84 <__libc_init_array+0x44>)
 8002a54:	f000 f818 	bl	8002a88 <_init>
 8002a58:	1b64      	subs	r4, r4, r5
 8002a5a:	10a4      	asrs	r4, r4, #2
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	42a6      	cmp	r6, r4
 8002a60:	d105      	bne.n	8002a6e <__libc_init_array+0x2e>
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a68:	4798      	blx	r3
 8002a6a:	3601      	adds	r6, #1
 8002a6c:	e7ee      	b.n	8002a4c <__libc_init_array+0xc>
 8002a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a72:	4798      	blx	r3
 8002a74:	3601      	adds	r6, #1
 8002a76:	e7f2      	b.n	8002a5e <__libc_init_array+0x1e>
 8002a78:	0806f6a4 	.word	0x0806f6a4
 8002a7c:	0806f6a4 	.word	0x0806f6a4
 8002a80:	0806f6a4 	.word	0x0806f6a4
 8002a84:	0806f6a8 	.word	0x0806f6a8

08002a88 <_init>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr

08002a94 <_fini>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr
