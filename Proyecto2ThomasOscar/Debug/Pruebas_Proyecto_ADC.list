
Pruebas_Proyecto_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d6c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006cc0c  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08070b3c  08070b3c  000789d8  2**0
                  CONTENTS
  4 .ARM          00000008  08070b3c  08070b3c  00071b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08070b44  08070b44  000789d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08070b44  08070b44  00071b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08070b48  08070b48  00071b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000069d8  20000000  08070b4c  00072000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200069d8  08077524  000789d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ad0  08077524  00078ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000789d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088ff  00000000  00000000  00078a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a49  00000000  00000000  00081307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00082d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023162  00000000  00000000  000835b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b5c3  00000000  00000000  000a6712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d66a3  00000000  00000000  000b1cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00188378  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000632  00000000  00000000  001883bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020ac  00000000  00000000  001889f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0018aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200069d8 	.word	0x200069d8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003f18 	.word	0x08003f18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200069dc 	.word	0x200069dc
 8000200:	08003f18 	.word	0x08003f18

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	4878      	ldr	r0, [pc, #480]	@ (80006f0 <LCD_Init+0x1ec>)
 800050e:	f002 ff05 	bl	800331c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000512:	2201      	movs	r2, #1
 8000514:	2113      	movs	r1, #19
 8000516:	4877      	ldr	r0, [pc, #476]	@ (80006f4 <LCD_Init+0x1f0>)
 8000518:	f002 ff00 	bl	800331c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	4875      	ldr	r0, [pc, #468]	@ (80006f8 <LCD_Init+0x1f4>)
 8000522:	f002 fefb 	bl	800331c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000526:	2005      	movs	r0, #5
 8000528:	f002 f832 	bl	8002590 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	4871      	ldr	r0, [pc, #452]	@ (80006f8 <LCD_Init+0x1f4>)
 8000532:	f002 fef3 	bl	800331c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000536:	2014      	movs	r0, #20
 8000538:	f002 f82a 	bl	8002590 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2102      	movs	r1, #2
 8000540:	486d      	ldr	r0, [pc, #436]	@ (80006f8 <LCD_Init+0x1f4>)
 8000542:	f002 feeb 	bl	800331c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000546:	2096      	movs	r0, #150	@ 0x96
 8000548:	f002 f822 	bl	8002590 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4867      	ldr	r0, [pc, #412]	@ (80006f0 <LCD_Init+0x1ec>)
 8000552:	f002 fee3 	bl	800331c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000556:	20e9      	movs	r0, #233	@ 0xe9
 8000558:	f000 f8d0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x20);
 800055c:	2020      	movs	r0, #32
 800055e:	f000 f973 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000562:	2011      	movs	r0, #17
 8000564:	f000 f8ca 	bl	80006fc <LCD_CMD>
	HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f002 f811 	bl	8002590 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800056e:	20d1      	movs	r0, #209	@ 0xd1
 8000570:	f000 f8c4 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f967 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x71);
 800057a:	2071      	movs	r0, #113	@ 0x71
 800057c:	f000 f964 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x19);
 8000580:	2019      	movs	r0, #25
 8000582:	f000 f961 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000586:	20d0      	movs	r0, #208	@ 0xd0
 8000588:	f000 f8b8 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x07);
 800058c:	2007      	movs	r0, #7
 800058e:	f000 f95b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 f958 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 8000598:	2008      	movs	r0, #8
 800059a:	f000 f955 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800059e:	2036      	movs	r0, #54	@ 0x36
 80005a0:	f000 f8ac 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005a4:	20e8      	movs	r0, #232	@ 0xe8
 80005a6:	f000 f94f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005aa:	203a      	movs	r0, #58	@ 0x3a
 80005ac:	f000 f8a6 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 f949 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005b6:	20c1      	movs	r0, #193	@ 0xc1
 80005b8:	f000 f8a0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 f943 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 80005c2:	2010      	movs	r0, #16
 80005c4:	f000 f940 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f93d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 f93a 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80005d4:	20c0      	movs	r0, #192	@ 0xc0
 80005d6:	f000 f891 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f934 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 80005e0:	2035      	movs	r0, #53	@ 0x35
 80005e2:	f000 f931 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f92e 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f92b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f928 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 f925 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80005fe:	20c5      	movs	r0, #197	@ 0xc5
 8000600:	f000 f87c 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000604:	2004      	movs	r0, #4
 8000606:	f000 f91f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800060a:	20d2      	movs	r0, #210	@ 0xd2
 800060c:	f000 f876 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x01);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f919 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x44);
 8000616:	2044      	movs	r0, #68	@ 0x44
 8000618:	f000 f916 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800061c:	20c8      	movs	r0, #200	@ 0xc8
 800061e:	f000 f86d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04);
 8000622:	2004      	movs	r0, #4
 8000624:	f000 f910 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x67);
 8000628:	2067      	movs	r0, #103	@ 0x67
 800062a:	f000 f90d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 800062e:	2035      	movs	r0, #53	@ 0x35
 8000630:	f000 f90a 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x04);
 8000634:	2004      	movs	r0, #4
 8000636:	f000 f907 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800063a:	2008      	movs	r0, #8
 800063c:	f000 f904 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x06);
 8000640:	2006      	movs	r0, #6
 8000642:	f000 f901 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x24);
 8000646:	2024      	movs	r0, #36	@ 0x24
 8000648:	f000 f8fe 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f8fb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x37);
 8000652:	2037      	movs	r0, #55	@ 0x37
 8000654:	f000 f8f8 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x40);
 8000658:	2040      	movs	r0, #64	@ 0x40
 800065a:	f000 f8f5 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x03);
 800065e:	2003      	movs	r0, #3
 8000660:	f000 f8f2 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 8000664:	2010      	movs	r0, #16
 8000666:	f000 f8ef 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 f8ec 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x80);
 8000670:	2080      	movs	r0, #128	@ 0x80
 8000672:	f000 f8e9 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f8e6 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800067c:	202a      	movs	r0, #42	@ 0x2a
 800067e:	f000 f83d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f8e0 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8dd 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f8da 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x3F);
 8000694:	203f      	movs	r0, #63	@ 0x3f
 8000696:	f000 f8d7 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800069a:	202b      	movs	r0, #43	@ 0x2b
 800069c:	f000 f82e 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f8d1 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ce 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f8cb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0xE0);
 80006b2:	20e0      	movs	r0, #224	@ 0xe0
 80006b4:	f000 f8c8 	bl	8000848 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006b8:	2029      	movs	r0, #41	@ 0x29
 80006ba:	f000 f81f 	bl	80006fc <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006be:	202c      	movs	r0, #44	@ 0x2c
 80006c0:	f000 f81c 	bl	80006fc <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006c4:	2020      	movs	r0, #32
 80006c6:	f000 f819 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f001 ff60 	bl	8002590 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006d0:	2011      	movs	r0, #17
 80006d2:	f000 f813 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f001 ff5a 	bl	8002590 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80006dc:	2029      	movs	r0, #41	@ 0x29
 80006de:	f000 f80d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <LCD_Init+0x1ec>)
 80006e8:	f002 fe18 	bl	800331c <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020800 	.word	0x40020800

080006fc <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	484c      	ldr	r0, [pc, #304]	@ (800083c <LCD_CMD+0x140>)
 800070c:	f002 fe06 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	4849      	ldr	r0, [pc, #292]	@ (800083c <LCD_CMD+0x140>)
 8000716:	f002 fe01 	bl	800331c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <LCD_CMD+0x140>)
 800072c:	f002 fdf6 	bl	800331c <HAL_GPIO_WritePin>
 8000730:	e005      	b.n	800073e <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	4840      	ldr	r0, [pc, #256]	@ (800083c <LCD_CMD+0x140>)
 800073a:	f002 fdef 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	483c      	ldr	r0, [pc, #240]	@ (8000840 <LCD_CMD+0x144>)
 800074e:	f002 fde5 	bl	800331c <HAL_GPIO_WritePin>
 8000752:	e004      	b.n	800075e <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <LCD_CMD+0x144>)
 800075a:	f002 fddf 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <LCD_CMD+0x140>)
 8000770:	f002 fdd4 	bl	800331c <HAL_GPIO_WritePin>
 8000774:	e005      	b.n	8000782 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <LCD_CMD+0x140>)
 800077e:	f002 fdcd 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2108      	movs	r1, #8
 8000790:	482c      	ldr	r0, [pc, #176]	@ (8000844 <LCD_CMD+0x148>)
 8000792:	f002 fdc3 	bl	800331c <HAL_GPIO_WritePin>
 8000796:	e004      	b.n	80007a2 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	4829      	ldr	r0, [pc, #164]	@ (8000844 <LCD_CMD+0x148>)
 800079e:	f002 fdbd 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2120      	movs	r1, #32
 80007b0:	4824      	ldr	r0, [pc, #144]	@ (8000844 <LCD_CMD+0x148>)
 80007b2:	f002 fdb3 	bl	800331c <HAL_GPIO_WritePin>
 80007b6:	e004      	b.n	80007c2 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4821      	ldr	r0, [pc, #132]	@ (8000844 <LCD_CMD+0x148>)
 80007be:	f002 fdad 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d005      	beq.n	80007d8 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	481c      	ldr	r0, [pc, #112]	@ (8000844 <LCD_CMD+0x148>)
 80007d2:	f002 fda3 	bl	800331c <HAL_GPIO_WritePin>
 80007d6:	e004      	b.n	80007e2 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2110      	movs	r1, #16
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <LCD_CMD+0x148>)
 80007de:	f002 fd9d 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d006      	beq.n	80007fa <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	4814      	ldr	r0, [pc, #80]	@ (8000844 <LCD_CMD+0x148>)
 80007f4:	f002 fd92 	bl	800331c <HAL_GPIO_WritePin>
 80007f8:	e005      	b.n	8000806 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <LCD_CMD+0x148>)
 8000802:	f002 fd8b 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	da06      	bge.n	800081c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <LCD_CMD+0x140>)
 8000816:	f002 fd81 	bl	800331c <HAL_GPIO_WritePin>
 800081a:	e005      	b.n	8000828 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <LCD_CMD+0x140>)
 8000824:	f002 fd7a 	bl	800331c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <LCD_CMD+0x140>)
 800082e:	f002 fd75 	bl	800331c <HAL_GPIO_WritePin>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400

08000848 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	484c      	ldr	r0, [pc, #304]	@ (8000988 <LCD_DATA+0x140>)
 8000858:	f002 fd60 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	4849      	ldr	r0, [pc, #292]	@ (8000988 <LCD_DATA+0x140>)
 8000862:	f002 fd5b 	bl	800331c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000876:	4844      	ldr	r0, [pc, #272]	@ (8000988 <LCD_DATA+0x140>)
 8000878:	f002 fd50 	bl	800331c <HAL_GPIO_WritePin>
 800087c:	e005      	b.n	800088a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000884:	4840      	ldr	r0, [pc, #256]	@ (8000988 <LCD_DATA+0x140>)
 8000886:	f002 fd49 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	483c      	ldr	r0, [pc, #240]	@ (800098c <LCD_DATA+0x144>)
 800089a:	f002 fd3f 	bl	800331c <HAL_GPIO_WritePin>
 800089e:	e004      	b.n	80008aa <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	@ 0x80
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <LCD_DATA+0x144>)
 80008a6:	f002 fd39 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ba:	4833      	ldr	r0, [pc, #204]	@ (8000988 <LCD_DATA+0x140>)
 80008bc:	f002 fd2e 	bl	800331c <HAL_GPIO_WritePin>
 80008c0:	e005      	b.n	80008ce <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	482f      	ldr	r0, [pc, #188]	@ (8000988 <LCD_DATA+0x140>)
 80008ca:	f002 fd27 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d005      	beq.n	80008e4 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2108      	movs	r1, #8
 80008dc:	482c      	ldr	r0, [pc, #176]	@ (8000990 <LCD_DATA+0x148>)
 80008de:	f002 fd1d 	bl	800331c <HAL_GPIO_WritePin>
 80008e2:	e004      	b.n	80008ee <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	4829      	ldr	r0, [pc, #164]	@ (8000990 <LCD_DATA+0x148>)
 80008ea:	f002 fd17 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	4824      	ldr	r0, [pc, #144]	@ (8000990 <LCD_DATA+0x148>)
 80008fe:	f002 fd0d 	bl	800331c <HAL_GPIO_WritePin>
 8000902:	e004      	b.n	800090e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2120      	movs	r1, #32
 8000908:	4821      	ldr	r0, [pc, #132]	@ (8000990 <LCD_DATA+0x148>)
 800090a:	f002 fd07 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <LCD_DATA+0x148>)
 800091e:	f002 fcfd 	bl	800331c <HAL_GPIO_WritePin>
 8000922:	e004      	b.n	800092e <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4819      	ldr	r0, [pc, #100]	@ (8000990 <LCD_DATA+0x148>)
 800092a:	f002 fcf7 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <LCD_DATA+0x148>)
 8000940:	f002 fcec 	bl	800331c <HAL_GPIO_WritePin>
 8000944:	e005      	b.n	8000952 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <LCD_DATA+0x148>)
 800094e:	f002 fce5 	bl	800331c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da06      	bge.n	8000968 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <LCD_DATA+0x140>)
 8000962:	f002 fcdb 	bl	800331c <HAL_GPIO_WritePin>
 8000966:	e005      	b.n	8000974 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <LCD_DATA+0x140>)
 8000970:	f002 fcd4 	bl	800331c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <LCD_DATA+0x140>)
 800097a:	f002 fccf 	bl	800331c <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020400 	.word	0x40020400

08000994 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009a2:	202a      	movs	r0, #42	@ 0x2a
 80009a4:	f7ff feaa 	bl	80006fc <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff4a 	bl	8000848 <LCD_DATA>
	LCD_DATA(x1);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff45 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff3f 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff3a 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80009d4:	202b      	movs	r0, #43	@ 0x2b
 80009d6:	f7ff fe91 	bl	80006fc <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <LCD_DATA>
	LCD_DATA(y1);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff2c 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff26 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff21 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a06:	202c      	movs	r0, #44	@ 0x2c
 8000a08:	f7ff fe78 	bl	80006fc <LCD_CMD>
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a1c:	202c      	movs	r0, #44	@ 0x2c
 8000a1e:	f7ff fe6d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	481b      	ldr	r0, [pc, #108]	@ (8000a94 <LCD_Clear+0x80>)
 8000a28:	f002 fc78 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <LCD_Clear+0x84>)
 8000a32:	f002 fc73 	bl	800331c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a36:	23ef      	movs	r3, #239	@ 0xef
 8000a38:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ffa8 	bl	8000994 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	e016      	b.n	8000a78 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e00d      	b.n	8000a6c <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fef6 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fef1 	bl	8000848 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2bef      	cmp	r3, #239	@ 0xef
 8000a70:	d9ee      	bls.n	8000a50 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a7e:	d3e4      	bcc.n	8000a4a <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <LCD_Clear+0x84>)
 8000a86:	f002 fc49 	bl	800331c <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000aaa:	202c      	movs	r0, #44	@ 0x2c
 8000aac:	f7ff fe26 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <FillRect+0xac>)
 8000ab6:	f002 fc31 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <FillRect+0xb0>)
 8000ac0:	f002 fc2c 	bl	800331c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff58 	bl	8000994 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	fb02 f303 	mul.w	r3, r2, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	3b01      	subs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	e01a      	b.n	8000b2e <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e010      	b.n	8000b20 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe9f 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe9a 	bl	8000848 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	3b02      	subs	r3, #2
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8ea      	bhi.n	8000afe <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d8e0      	bhi.n	8000af8 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <FillRect+0xb0>)
 8000b3c:	f002 fbee 	bl	800331c <HAL_GPIO_WritePin>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b54:	b093      	sub	sp, #76	@ 0x4c
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	466b      	mov	r3, sp
 8000b62:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d103      	bne.n	8000b72 <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d103      	bne.n	8000b80 <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d103      	bne.n	8000b8e <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000b86:	2320      	movs	r3, #32
 8000b88:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000b8a:	2332      	movs	r3, #50	@ 0x32
 8000b8c:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff fb38 	bl	8000204 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	1e4b      	subs	r3, r1, #1
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	4690      	mov	r8, r2
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4614      	mov	r4, r2
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	00eb      	lsls	r3, r5, #3
 8000bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd2:	00e2      	lsls	r2, r4, #3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	ebad 0d03 	sub.w	sp, sp, r3
 8000be0:	466b      	mov	r3, sp
 8000be2:	3300      	adds	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bea:	e00b      	b.n	8000c04 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	7819      	ldrb	r1, [r3, #0]
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bf8:	4413      	add	r3, r2
 8000bfa:	460a      	mov	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c00:	3301      	adds	r3, #1
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1ed      	bne.n	8000bec <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e077      	b.n	8000d06 <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000c20:	7efb      	ldrb	r3, [r7, #27]
 8000c22:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	483c      	ldr	r0, [pc, #240]	@ (8000d1c <LCD_Print+0x1cc>)
 8000c2a:	f002 fb77 	bl	800331c <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c32:	fb03 f202 	mul.w	r2, r3, r2
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c42:	fb03 f202 	mul.w	r2, r3, r2
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	441a      	add	r2, r3
 8000c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	461c      	mov	r4, r3
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c56:	4413      	add	r3, r2
 8000c58:	4622      	mov	r2, r4
 8000c5a:	f7ff fe9b 	bl	8000994 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c62:	e044      	b.n	8000cee <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10b      	bne.n	8000c82 <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3b20      	subs	r3, #32
 8000c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a29      	ldr	r2, [pc, #164]	@ (8000d20 <LCD_Print+0x1d0>)
 8000c7c:	4413      	add	r3, r2
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d10c      	bne.n	8000ca2 <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3b20      	subs	r3, #32
 8000c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <LCD_Print+0x1d4>)
 8000c9c:	4413      	add	r3, r2
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ca6:	e01b      	b.n	8000ce0 <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2201      	movs	r2, #1
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dd02      	ble.n	8000cc0 <LCD_Print+0x170>
					c = color;
 8000cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cbe:	e001      	b.n	8000cc4 <LCD_Print+0x174>
				} else {
					c = background;
 8000cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cc6:	121b      	asrs	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fdbc 	bl	8000848 <LCD_DATA>
				LCD_DATA(c);
 8000cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdb7 	bl	8000848 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	3301      	adds	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dadf      	bge.n	8000ca8 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cea:	3301      	adds	r3, #1
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbb6      	blt.n	8000c64 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4808      	ldr	r0, [pc, #32]	@ (8000d1c <LCD_Print+0x1cc>)
 8000cfc:	f002 fb0e 	bl	800331c <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	3301      	adds	r3, #1
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	db83      	blt.n	8000c16 <LCD_Print+0xc6>
 8000d0e:	46b5      	mov	sp, r6
	}
}
 8000d10:	bf00      	nop
 8000d12:	374c      	adds	r7, #76	@ 0x4c
 8000d14:	46bd      	mov	sp, r7
 8000d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	08003f60 	.word	0x08003f60
 8000d24:	080043d4 	.word	0x080043d4

08000d28 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000d36:	202c      	movs	r0, #44	@ 0x2c
 8000d38:	f7ff fce0 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <LCD_Bitmap+0xac>)
 8000d42:	f002 faeb 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4823      	ldr	r0, [pc, #140]	@ (8000dd8 <LCD_Bitmap+0xb0>)
 8000d4c:	f002 fae6 	bl	800331c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe12 	bl	8000994 <SetWindows>
	unsigned int k = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	e01e      	b.n	8000db8 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e014      	b.n	8000daa <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd5d 	bl	8000848 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	3301      	adds	r3, #1
 8000d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd55 	bl	8000848 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	3302      	adds	r3, #2
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8e6      	bhi.n	8000d80 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	3301      	adds	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8dc      	bhi.n	8000d7a <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <LCD_Bitmap+0xb0>)
 8000dc6:	f002 faa9 	bl	800331c <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400

08000ddc <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000dea:	202c      	movs	r0, #44	@ 0x2c
 8000dec:	f7ff fc86 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	484d      	ldr	r0, [pc, #308]	@ (8000f2c <LCD_Sprite+0x150>)
 8000df6:	f002 fa91 	bl	800331c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	484c      	ldr	r0, [pc, #304]	@ (8000f30 <LCD_Sprite+0x154>)
 8000e00:	f002 fa8c 	bl	800331c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f7ff fdb8 	bl	8000994 <SetWindows>
	int k = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000e32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03a      	beq.n	8000eb0 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3e:	e032      	b.n	8000ea6 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	fb03 f202 	mul.w	r2, r3, r2
 8000e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e64:	4413      	add	r3, r2
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6c:	e014      	b.n	8000e98 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fce6 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	3301      	adds	r3, #1
 8000e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcde 	bl	8000848 <LCD_DATA>
				k = k - 2;
 8000e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	3301      	adds	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbe6      	blt.n	8000e6e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbc8      	blt.n	8000e40 <LCD_Sprite+0x64>
 8000eae:	e034      	b.n	8000f1a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	e02d      	b.n	8000f12 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e014      	b.n	8000f04 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fcb0 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	3301      	adds	r3, #1
 8000eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fca8 	bl	8000848 <LCD_DATA>
				k = k + 2;
 8000ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efa:	3302      	adds	r3, #2
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbe6      	blt.n	8000eda <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3a      	ldr	r2, [r7, #32]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbcd      	blt.n	8000eb6 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <LCD_Sprite+0x154>)
 8000f20:	f002 f9fc 	bl	800331c <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	@ 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <Read_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Función para leer valores del ADC */
int Read_ADC(uint32_t channel) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <Read_ADC+0x58>)
 8000f5e:	f001 fd1d 	bl	800299c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <Read_ADC+0x58>)
 8000f64:	f001 fb7c 	bl	8002660 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <Read_ADC+0x58>)
 8000f6e:	f001 fc7c 	bl	800286a <HAL_ADC_PollForConversion>
    int value = HAL_ADC_GetValue(&hadc1);
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <Read_ADC+0x58>)
 8000f74:	f001 fd04 	bl	8002980 <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_ADC_Stop(&hadc1);
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <Read_ADC+0x58>)
 8000f7e:	f001 fc41 	bl	8002804 <HAL_ADC_Stop>

    return value;
 8000f82:	69fb      	ldr	r3, [r7, #28]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200069f4 	.word	0x200069f4

08000f90 <startGame>:

/* Función para iniciar el juego */
void startGame() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af02      	add	r7, sp, #8
		contadorvidasP = 0;
 8000f96:	4bd1      	ldr	r3, [pc, #836]	@ (80012dc <startGame+0x34c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
    // Dibuja el fondo completo inicialmente
		LCD_Bitmap(0, 0, 320, 240, fondo);
 8000f9c:	4bd0      	ldr	r3, [pc, #832]	@ (80012e0 <startGame+0x350>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	23f0      	movs	r3, #240	@ 0xf0
 8000fa2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff febd 	bl	8000d28 <LCD_Bitmap>
		LCD_Bitmap(105, 143, 54, 46, perro1);  // Dibuja el primer frame del perro
 8000fae:	4bcd      	ldr	r3, [pc, #820]	@ (80012e4 <startGame+0x354>)
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	232e      	movs	r3, #46	@ 0x2e
 8000fb4:	2236      	movs	r2, #54	@ 0x36
 8000fb6:	218f      	movs	r1, #143	@ 0x8f
 8000fb8:	2069      	movs	r0, #105	@ 0x69
 8000fba:	f7ff feb5 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 8000fbe:	2005      	movs	r0, #5
 8000fc0:	f001 fae6 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8000fc4:	4bc6      	ldr	r3, [pc, #792]	@ (80012e0 <startGame+0x350>)
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	23f0      	movs	r3, #240	@ 0xf0
 8000fca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fea9 	bl	8000d28 <LCD_Bitmap>

    	// Desplaza ligeramente el perro y cambia la imagen
    	LCD_Bitmap(109, 147, 57, 42, perro2);  // Dibuja el segundo frame
 8000fd6:	4bc4      	ldr	r3, [pc, #784]	@ (80012e8 <startGame+0x358>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	232a      	movs	r3, #42	@ 0x2a
 8000fdc:	2239      	movs	r2, #57	@ 0x39
 8000fde:	2193      	movs	r1, #147	@ 0x93
 8000fe0:	206d      	movs	r0, #109	@ 0x6d
 8000fe2:	f7ff fea1 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 fad2 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8000fec:	4bbc      	ldr	r3, [pc, #752]	@ (80012e0 <startGame+0x350>)
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	23f0      	movs	r3, #240	@ 0xf0
 8000ff2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fe95 	bl	8000d28 <LCD_Bitmap>

    	// Continúa desplazando el perro
    	LCD_Bitmap(113, 147, 57, 42, perro3);  // Dibuja el tercer frame
 8000ffe:	4bbb      	ldr	r3, [pc, #748]	@ (80012ec <startGame+0x35c>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	232a      	movs	r3, #42	@ 0x2a
 8001004:	2239      	movs	r2, #57	@ 0x39
 8001006:	2193      	movs	r1, #147	@ 0x93
 8001008:	2071      	movs	r0, #113	@ 0x71
 800100a:	f7ff fe8d 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 800100e:	2005      	movs	r0, #5
 8001010:	f001 fabe 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001014:	4bb2      	ldr	r3, [pc, #712]	@ (80012e0 <startGame+0x350>)
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	23f0      	movs	r3, #240	@ 0xf0
 800101a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800101e:	2100      	movs	r1, #0
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fe81 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(117, 147, 57, 42, perro2);  // Dibuja el cuarto frame
 8001026:	4bb0      	ldr	r3, [pc, #704]	@ (80012e8 <startGame+0x358>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	232a      	movs	r3, #42	@ 0x2a
 800102c:	2239      	movs	r2, #57	@ 0x39
 800102e:	2193      	movs	r1, #147	@ 0x93
 8001030:	2075      	movs	r0, #117	@ 0x75
 8001032:	f7ff fe79 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 8001036:	2005      	movs	r0, #5
 8001038:	f001 faaa 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 800103c:	4ba8      	ldr	r3, [pc, #672]	@ (80012e0 <startGame+0x350>)
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	23f0      	movs	r3, #240	@ 0xf0
 8001042:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001046:	2100      	movs	r1, #0
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fe6d 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(121, 147, 57, 42, perro3);  // Dibuja el quinto frame
 800104e:	4ba7      	ldr	r3, [pc, #668]	@ (80012ec <startGame+0x35c>)
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	232a      	movs	r3, #42	@ 0x2a
 8001054:	2239      	movs	r2, #57	@ 0x39
 8001056:	2193      	movs	r1, #147	@ 0x93
 8001058:	2079      	movs	r0, #121	@ 0x79
 800105a:	f7ff fe65 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 800105e:	2005      	movs	r0, #5
 8001060:	f001 fa96 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001064:	4b9e      	ldr	r3, [pc, #632]	@ (80012e0 <startGame+0x350>)
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	23f0      	movs	r3, #240	@ 0xf0
 800106a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe59 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(125, 147, 57, 42, perro2);  // Dibuja el sexto frame
 8001076:	4b9c      	ldr	r3, [pc, #624]	@ (80012e8 <startGame+0x358>)
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	232a      	movs	r3, #42	@ 0x2a
 800107c:	2239      	movs	r2, #57	@ 0x39
 800107e:	2193      	movs	r1, #147	@ 0x93
 8001080:	207d      	movs	r0, #125	@ 0x7d
 8001082:	f7ff fe51 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 8001086:	2005      	movs	r0, #5
 8001088:	f001 fa82 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 800108c:	4b94      	ldr	r3, [pc, #592]	@ (80012e0 <startGame+0x350>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	23f0      	movs	r3, #240	@ 0xf0
 8001092:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001096:	2100      	movs	r1, #0
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fe45 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(129, 147, 57, 42, perro3);  // Dibuja el séptimo frame
 800109e:	4b93      	ldr	r3, [pc, #588]	@ (80012ec <startGame+0x35c>)
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	232a      	movs	r3, #42	@ 0x2a
 80010a4:	2239      	movs	r2, #57	@ 0x39
 80010a6:	2193      	movs	r1, #147	@ 0x93
 80010a8:	2081      	movs	r0, #129	@ 0x81
 80010aa:	f7ff fe3d 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f001 fa6e 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80010b4:	4b8a      	ldr	r3, [pc, #552]	@ (80012e0 <startGame+0x350>)
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	23f0      	movs	r3, #240	@ 0xf0
 80010ba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fe31 	bl	8000d28 <LCD_Bitmap>

    	// Salto del perro
    	LCD_Bitmap(132, 142, 57, 53, perro4);  // Dibuja el perro saltando
 80010c6:	4b8a      	ldr	r3, [pc, #552]	@ (80012f0 <startGame+0x360>)
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2335      	movs	r3, #53	@ 0x35
 80010cc:	2239      	movs	r2, #57	@ 0x39
 80010ce:	218e      	movs	r1, #142	@ 0x8e
 80010d0:	2084      	movs	r0, #132	@ 0x84
 80010d2:	f7ff fe29 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 fa5a 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 80010dc:	4b80      	ldr	r3, [pc, #512]	@ (80012e0 <startGame+0x350>)
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	23f0      	movs	r3, #240	@ 0xf0
 80010e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010e6:	2100      	movs	r1, #0
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fe1d 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(136, 122, 37, 48, perro5);  // Dibuja el siguiente frame del salto
 80010ee:	4b81      	ldr	r3, [pc, #516]	@ (80012f4 <startGame+0x364>)
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2330      	movs	r3, #48	@ 0x30
 80010f4:	2225      	movs	r2, #37	@ 0x25
 80010f6:	217a      	movs	r1, #122	@ 0x7a
 80010f8:	2088      	movs	r0, #136	@ 0x88
 80010fa:	f7ff fe15 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 80010fe:	2005      	movs	r0, #5
 8001100:	f001 fa46 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001104:	4b76      	ldr	r3, [pc, #472]	@ (80012e0 <startGame+0x350>)
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	23f0      	movs	r3, #240	@ 0xf0
 800110a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fe09 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(150, 114, 37, 48, perro6);  // Dibuja el siguiente frame del salto
 8001116:	4b78      	ldr	r3, [pc, #480]	@ (80012f8 <startGame+0x368>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2330      	movs	r3, #48	@ 0x30
 800111c:	2225      	movs	r2, #37	@ 0x25
 800111e:	2172      	movs	r1, #114	@ 0x72
 8001120:	2096      	movs	r0, #150	@ 0x96
 8001122:	f7ff fe01 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 8001126:	2005      	movs	r0, #5
 8001128:	f001 fa32 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 800112c:	4b6c      	ldr	r3, [pc, #432]	@ (80012e0 <startGame+0x350>)
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	23f0      	movs	r3, #240	@ 0xf0
 8001132:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001136:	2100      	movs	r1, #0
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fdf5 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(175, 132, 33, 33, perro7);  // Dibuja el perro aterrizando
 800113e:	4b6f      	ldr	r3, [pc, #444]	@ (80012fc <startGame+0x36c>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2321      	movs	r3, #33	@ 0x21
 8001144:	2221      	movs	r2, #33	@ 0x21
 8001146:	2184      	movs	r1, #132	@ 0x84
 8001148:	20af      	movs	r0, #175	@ 0xaf
 800114a:	f7ff fded 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(5);
 800114e:	2005      	movs	r0, #5
 8001150:	f001 fa1e 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);  // Redibuja el fondo completo
 8001154:	4b62      	ldr	r3, [pc, #392]	@ (80012e0 <startGame+0x350>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	23f0      	movs	r3, #240	@ 0xf0
 800115a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fde1 	bl	8000d28 <LCD_Bitmap>
    	HAL_Delay(1000);  // Pausa antes de mostrar la ronda
 8001166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116a:	f001 fa11 	bl	8002590 <HAL_Delay>

    	FillRect(0, 0, 100, 40,  0x559D);  // Rellena la pantalla con color celeste
 800116e:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2328      	movs	r3, #40	@ 0x28
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	2100      	movs	r1, #0
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fc8e 	bl	8000a9c <FillRect>
    	LCD_Print("    Estas Listo!", 20, 80, 2, 0x0000,  0x559D);  // Texto negro con fondo celeste
 8001180:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2302      	movs	r3, #2
 800118c:	2250      	movs	r2, #80	@ 0x50
 800118e:	2114      	movs	r1, #20
 8001190:	485b      	ldr	r0, [pc, #364]	@ (8001300 <startGame+0x370>)
 8001192:	f7ff fcdd 	bl	8000b50 <LCD_Print>
    	HAL_Delay(1000);
 8001196:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800119a:	f001 f9f9 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);
 800119e:	4b50      	ldr	r3, [pc, #320]	@ (80012e0 <startGame+0x350>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	23f0      	movs	r3, #240	@ 0xf0
 80011a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011a8:	2100      	movs	r1, #0
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fdbc 	bl	8000d28 <LCD_Bitmap>
    	FillRect(0, 0, 100, 40, 0x559D);  // �?rea donde aparece el número
 80011b0:	f245 539d 	movw	r3, #21917	@ 0x559d
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2328      	movs	r3, #40	@ 0x28
 80011b8:	2264      	movs	r2, #100	@ 0x64
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fc6d 	bl	8000a9c <FillRect>
    	LCD_Print("3", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 80011c2:	f245 539d 	movw	r3, #21917	@ 0x559d
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2302      	movs	r3, #2
 80011ce:	2250      	movs	r2, #80	@ 0x50
 80011d0:	2196      	movs	r1, #150	@ 0x96
 80011d2:	484c      	ldr	r0, [pc, #304]	@ (8001304 <startGame+0x374>)
 80011d4:	f7ff fcbc 	bl	8000b50 <LCD_Print>
    	HAL_Delay(1000);  // Pausa de 1 segundo
 80011d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011dc:	f001 f9d8 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);
 80011e0:	4b3f      	ldr	r3, [pc, #252]	@ (80012e0 <startGame+0x350>)
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	23f0      	movs	r3, #240	@ 0xf0
 80011e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fd9b 	bl	8000d28 <LCD_Bitmap>
    		    // Muestra el número "2" con fondo celeste
    	FillRect(0, 0, 100, 40, 0x559D);  // �?rea donde aparece el número
 80011f2:	f245 539d 	movw	r3, #21917	@ 0x559d
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2328      	movs	r3, #40	@ 0x28
 80011fa:	2264      	movs	r2, #100	@ 0x64
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fc4c 	bl	8000a9c <FillRect>
    	LCD_Print("2", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 8001204:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2302      	movs	r3, #2
 8001210:	2250      	movs	r2, #80	@ 0x50
 8001212:	2196      	movs	r1, #150	@ 0x96
 8001214:	483c      	ldr	r0, [pc, #240]	@ (8001308 <startGame+0x378>)
 8001216:	f7ff fc9b 	bl	8000b50 <LCD_Print>
    	HAL_Delay(1000);  // Pausa de 1 segundo
 800121a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800121e:	f001 f9b7 	bl	8002590 <HAL_Delay>
    	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001222:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <startGame+0x350>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	23f0      	movs	r3, #240	@ 0xf0
 8001228:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800122c:	2100      	movs	r1, #0
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fd7a 	bl	8000d28 <LCD_Bitmap>
    		    // Muestra el número "1" con fondo celeste
    	FillRect(0, 0, 100, 40, 0x559D);  // �?rea donde aparece el número
 8001234:	f245 539d 	movw	r3, #21917	@ 0x559d
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2328      	movs	r3, #40	@ 0x28
 800123c:	2264      	movs	r2, #100	@ 0x64
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fc2b 	bl	8000a9c <FillRect>
    	LCD_Print("1", 150, 80, 2, 0x0000, 0x559D);  // Texto negro
 8001246:	f245 539d 	movw	r3, #21917	@ 0x559d
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2302      	movs	r3, #2
 8001252:	2250      	movs	r2, #80	@ 0x50
 8001254:	2196      	movs	r1, #150	@ 0x96
 8001256:	482d      	ldr	r0, [pc, #180]	@ (800130c <startGame+0x37c>)
 8001258:	f7ff fc7a 	bl	8000b50 <LCD_Print>
    	HAL_Delay(1000);  // Pausa de 1 segundo
 800125c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001260:	f001 f996 	bl	8002590 <HAL_Delay>
    		// Dibuja los indicadores de ronda
    	LCD_Bitmap(0, 0, 320, 240, fondo);
 8001264:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <startGame+0x350>)
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	23f0      	movs	r3, #240	@ 0xf0
 800126a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800126e:	2100      	movs	r1, #0
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fd59 	bl	8000d28 <LCD_Bitmap>

    	LCD_Bitmap(120, 220, 9, 9, Ronda);
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <startGame+0x380>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2309      	movs	r3, #9
 800127c:	2209      	movs	r2, #9
 800127e:	21dc      	movs	r1, #220	@ 0xdc
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f7ff fd51 	bl	8000d28 <LCD_Bitmap>
    	LCD_Bitmap(132, 220, 9, 9, Ronda);
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <startGame+0x380>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2309      	movs	r3, #9
 800128c:	2209      	movs	r2, #9
 800128e:	21dc      	movs	r1, #220	@ 0xdc
 8001290:	2084      	movs	r0, #132	@ 0x84
 8001292:	f7ff fd49 	bl	8000d28 <LCD_Bitmap>
    	LCD_Bitmap(144, 220, 9, 9, Ronda);
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <startGame+0x380>)
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2309      	movs	r3, #9
 800129c:	2209      	movs	r2, #9
 800129e:	21dc      	movs	r1, #220	@ 0xdc
 80012a0:	2090      	movs	r0, #144	@ 0x90
 80012a2:	f7ff fd41 	bl	8000d28 <LCD_Bitmap>
    	LCD_Bitmap(156, 220, 9, 9, Ronda);
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <startGame+0x380>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2309      	movs	r3, #9
 80012ac:	2209      	movs	r2, #9
 80012ae:	21dc      	movs	r1, #220	@ 0xdc
 80012b0:	209c      	movs	r0, #156	@ 0x9c
 80012b2:	f7ff fd39 	bl	8000d28 <LCD_Bitmap>
    	LCD_Bitmap(168, 220, 9, 9, Ronda);
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <startGame+0x380>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2309      	movs	r3, #9
 80012bc:	2209      	movs	r2, #9
 80012be:	21dc      	movs	r1, #220	@ 0xdc
 80012c0:	20a8      	movs	r0, #168	@ 0xa8
 80012c2:	f7ff fd31 	bl	8000d28 <LCD_Bitmap>
    	LCD_Bitmap(180, 220, 9, 9, Ronda);
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <startGame+0x380>)
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2309      	movs	r3, #9
 80012cc:	2209      	movs	r2, #9
 80012ce:	21dc      	movs	r1, #220	@ 0xdc
 80012d0:	20b4      	movs	r0, #180	@ 0xb4
 80012d2:	f7ff fd29 	bl	8000d28 <LCD_Bitmap>

    // Continuar con el resto de la animación
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20006ab4 	.word	0x20006ab4
 80012e0:	0804b32c 	.word	0x0804b32c
 80012e4:	08004fb4 	.word	0x08004fb4
 80012e8:	0800631c 	.word	0x0800631c
 80012ec:	080075d0 	.word	0x080075d0
 80012f0:	08008884 	.word	0x08008884
 80012f4:	0800a020 	.word	0x0800a020
 80012f8:	0800ae00 	.word	0x0800ae00
 80012fc:	0800bbe0 	.word	0x0800bbe0
 8001300:	08003f30 	.word	0x08003f30
 8001304:	08003f44 	.word	0x08003f44
 8001308:	08003f48 	.word	0x08003f48
 800130c:	08003f4c 	.word	0x08003f4c
 8001310:	200068d8 	.word	0x200068d8

08001314 <drawMenu>:

/* Función para dibujar el menú */
void drawMenu(){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
    LCD_Clear(0x00);  // Limpia la pantalla
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fb7a 	bl	8000a14 <LCD_Clear>
    LCD_Bitmap(50, 0, 250, 216, selecion);  // Dibuja el menú de selección
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <drawMenu+0x50>)
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	23d8      	movs	r3, #216	@ 0xd8
 8001326:	22fa      	movs	r2, #250	@ 0xfa
 8001328:	2100      	movs	r1, #0
 800132a:	2032      	movs	r0, #50	@ 0x32
 800132c:	f7ff fcfc 	bl	8000d28 <LCD_Bitmap>

    // Mostrar el sprite decorativo del pato en el menú (a la izquierda)
    animarDecoracion();  // Llama a la función para animar el pato decorativo
 8001330:	f000 f81e 	bl	8001370 <animarDecoracion>

    // Mostrar las opciones del menú
    if (menu_position == 0) {
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <drawMenu+0x54>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d108      	bne.n	800134e <drawMenu+0x3a>
        LCD_Bitmap(100, 125, 11, 7, flecha);  // Flecha en la primera opción
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <drawMenu+0x58>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2307      	movs	r3, #7
 8001342:	220b      	movs	r2, #11
 8001344:	217d      	movs	r1, #125	@ 0x7d
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f7ff fcee 	bl	8000d28 <LCD_Bitmap>
    } else {
        LCD_Bitmap(100, 140, 11, 7, flecha);  // Flecha en la segunda opción
    }
}
 800134c:	e007      	b.n	800135e <drawMenu+0x4a>
        LCD_Bitmap(100, 140, 11, 7, flecha);  // Flecha en la segunda opción
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <drawMenu+0x58>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2307      	movs	r3, #7
 8001354:	220b      	movs	r2, #11
 8001356:	218c      	movs	r1, #140	@ 0x8c
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f7ff fce5 	bl	8000d28 <LCD_Bitmap>
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800c500 	.word	0x0800c500
 8001368:	20006a94 	.word	0x20006a94
 800136c:	0800c464 	.word	0x0800c464

08001370 <animarDecoracion>:
void animarDecoracion() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af06      	add	r7, sp, #24
    // Alternar entre los dos frames de animación del pato decorativo
    decoracionFrame = (decoracionFrame + 1) % 2;  // 2 frames para la animación de 'patox'
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <animarDecoracion+0x48>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	bfb8      	it	lt
 8001384:	425b      	neglt	r3, r3
 8001386:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <animarDecoracion+0x48>)
 8001388:	6013      	str	r3, [r2, #0]

    // Dibuja el sprite decorativo a la izquierda del menú (posición X: 10, Y: 100)
    LCD_Sprite(50, 125, 45, 40, patox, 2, decoracionFrame, 0, 1);
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <animarDecoracion+0x48>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	9204      	str	r2, [sp, #16]
 8001392:	2200      	movs	r2, #0
 8001394:	9203      	str	r2, [sp, #12]
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2302      	movs	r3, #2
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <animarDecoracion+0x4c>)
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2328      	movs	r3, #40	@ 0x28
 80013a2:	222d      	movs	r2, #45	@ 0x2d
 80013a4:	217d      	movs	r1, #125	@ 0x7d
 80013a6:	2032      	movs	r0, #50	@ 0x32
 80013a8:	f7ff fd18 	bl	8000ddc <LCD_Sprite>

    // Control de velocidad de animación (ajustable)
    HAL_Delay(200);  // Controla la velocidad de cambio entre los dos frames
 80013ac:	20c8      	movs	r0, #200	@ 0xc8
 80013ae:	f001 f8ef 	bl	8002590 <HAL_Delay>
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20006ac8 	.word	0x20006ac8
 80013bc:	200004ac 	.word	0x200004ac

080013c0 <menuSelection>:
/* Función para manejar el menú */
/* Función para manejar el menú */
void menuSelection() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
    LCD_Bitmap(50, 0, 250, 216, selecion);
 80013c6:	4b3e      	ldr	r3, [pc, #248]	@ (80014c0 <menuSelection+0x100>)
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	23d8      	movs	r3, #216	@ 0xd8
 80013cc:	22fa      	movs	r2, #250	@ 0xfa
 80013ce:	2100      	movs	r1, #0
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f7ff fca9 	bl	8000d28 <LCD_Bitmap>
    LCD_Bitmap(100, 125, 11, 7, flecha);
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <menuSelection+0x104>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2307      	movs	r3, #7
 80013dc:	220b      	movs	r2, #11
 80013de:	217d      	movs	r1, #125	@ 0x7d
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f7ff fca1 	bl	8000d28 <LCD_Bitmap>
    LCD_Bitmap(100, 140, 11, 7, flecha);
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <menuSelection+0x104>)
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2307      	movs	r3, #7
 80013ec:	220b      	movs	r2, #11
 80013ee:	218c      	movs	r1, #140	@ 0x8c
 80013f0:	2064      	movs	r0, #100	@ 0x64
 80013f2:	f7ff fc99 	bl	8000d28 <LCD_Bitmap>
    while (1) {
        int xValue1, yValue1, buttonState1;
        int xValue2, yValue2, buttonState2;

        // Leer valores de joystick 1 (jugador 1)
        xValue1 = Read_ADC(ADC_CHANNEL_9);  // Eje X en PB1 (canal ADC 9)
 80013f6:	2009      	movs	r0, #9
 80013f8:	f7ff fd9c 	bl	8000f34 <Read_ADC>
 80013fc:	6178      	str	r0, [r7, #20]
        yValue1 = Read_ADC(ADC_CHANNEL_12);  // Eje Y en PC2 (canal ADC 12)
 80013fe:	200c      	movs	r0, #12
 8001400:	f7ff fd98 	bl	8000f34 <Read_ADC>
 8001404:	6138      	str	r0, [r7, #16]
        buttonState1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);  // Leer estado del botón en PB13
 8001406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140a:	482f      	ldr	r0, [pc, #188]	@ (80014c8 <menuSelection+0x108>)
 800140c:	f001 ff6e 	bl	80032ec <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]

        // Leer valores de joystick 2 (jugador 2)
        xValue2 = Read_ADC(ADC_CHANNEL_14);  // Eje X del segundo joystick en PC4 (canal ADC 14)
 8001414:	200e      	movs	r0, #14
 8001416:	f7ff fd8d 	bl	8000f34 <Read_ADC>
 800141a:	60b8      	str	r0, [r7, #8]
        yValue2 = Read_ADC(ADC_CHANNEL_15);  // Eje Y del segundo joystick en PC5 (canal ADC 15)
 800141c:	200f      	movs	r0, #15
 800141e:	f7ff fd89 	bl	8000f34 <Read_ADC>
 8001422:	6078      	str	r0, [r7, #4]
        buttonState2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);  // Leer estado del botón en PB15
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <menuSelection+0x108>)
 800142a:	f001 ff5f 	bl	80032ec <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	603b      	str	r3, [r7, #0]

        // Mover flecha según el valor de Y de cualquiera de los dos joysticks
        if ((yValue1 < 1000 || yValue2 < 1000) && menu_position > 0) {
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001438:	db03      	blt.n	8001442 <menuSelection+0x82>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001440:	da09      	bge.n	8001456 <menuSelection+0x96>
 8001442:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <menuSelection+0x10c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dd05      	ble.n	8001456 <menuSelection+0x96>
            menu_position = 0;
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <menuSelection+0x10c>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
            drawMenu();  // Redibuja el menú
 8001450:	f7ff ff60 	bl	8001314 <drawMenu>
 8001454:	e012      	b.n	800147c <menuSelection+0xbc>
        } else if ((yValue1 > 3000 || yValue2 > 3000) && menu_position < 1) {
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800145c:	4293      	cmp	r3, r2
 800145e:	dc04      	bgt.n	800146a <menuSelection+0xaa>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001466:	4293      	cmp	r3, r2
 8001468:	dd08      	ble.n	800147c <menuSelection+0xbc>
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <menuSelection+0x10c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc04      	bgt.n	800147c <menuSelection+0xbc>
            menu_position = 1;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <menuSelection+0x10c>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
            drawMenu();  // Redibuja el menú
 8001478:	f7ff ff4c 	bl	8001314 <drawMenu>
        }

        // Si cualquiera de los botones se presiona, selecciona la opción
        if (buttonState1 == 0 || buttonState2 == 0) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <menuSelection+0xc8>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d113      	bne.n	80014b0 <menuSelection+0xf0>
            if (menu_position == 0) {
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <menuSelection+0x10c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <menuSelection+0xdc>
                numeroPatos = 1;  // Configura para un solo pato
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <menuSelection+0x110>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
                startGame();  // Inicia el juego con un pato
 8001496:	f7ff fd7b 	bl	8000f90 <startGame>
                break;
 800149a:	e00d      	b.n	80014b8 <menuSelection+0xf8>
            } else if (menu_position == 1) {
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <menuSelection+0x10c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <menuSelection+0xf0>
                numeroPatos = 2;  // Configura para dos patos
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <menuSelection+0x110>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
                startGame();  // Inicia el juego con dos patos
 80014aa:	f7ff fd71 	bl	8000f90 <startGame>
                break;
 80014ae:	e003      	b.n	80014b8 <menuSelection+0xf8>
            }
        }

        HAL_Delay(200);  // Retardo para evitar rebotes
 80014b0:	20c8      	movs	r0, #200	@ 0xc8
 80014b2:	f001 f86d 	bl	8002590 <HAL_Delay>
    while (1) {
 80014b6:	e79e      	b.n	80013f6 <menuSelection+0x36>
    }
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	0800c500 	.word	0x0800c500
 80014c4:	0800c464 	.word	0x0800c464
 80014c8:	40020400 	.word	0x40020400
 80014cc:	20006a94 	.word	0x20006a94
 80014d0:	200069b8 	.word	0x200069b8

080014d4 <matarPato>:

void matarPato(int miraX1, int miraY1, int miraX2, int miraY2) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af06      	add	r7, sp, #24
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    // Detectar si la mira del jugador 1 está sobre el pato y se presionó su botón
    if ((miraX1 > coorX && miraX1 < coorX + patoWidth && miraY1 > coorY && miraY1 < coorY + patoHeight) &&
 80014e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001614 <matarPato+0x140>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dd45      	ble.n	8001578 <matarPato+0xa4>
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <matarPato+0x140>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <matarPato+0x144>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	da3d      	bge.n	8001578 <matarPato+0xa4>
 80014fc:	4b47      	ldr	r3, [pc, #284]	@ (800161c <matarPato+0x148>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	dd38      	ble.n	8001578 <matarPato+0xa4>
 8001506:	4b45      	ldr	r3, [pc, #276]	@ (800161c <matarPato+0x148>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <matarPato+0x14c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	da30      	bge.n	8001578 <matarPato+0xa4>
        HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET && !patoMuerto) {
 8001516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151a:	4842      	ldr	r0, [pc, #264]	@ (8001624 <matarPato+0x150>)
 800151c:	f001 fee6 	bl	80032ec <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
    if ((miraX1 > coorX && miraX1 < coorX + patoWidth && miraY1 > coorY && miraY1 < coorY + patoHeight) &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	d128      	bne.n	8001578 <matarPato+0xa4>
        HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET && !patoMuerto) {
 8001526:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <matarPato+0x154>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d124      	bne.n	8001578 <matarPato+0xa4>

        patoMuerto = 1;  // Indica que el pato ha sido disparado
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <matarPato+0x154>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
        patoCayendo = 1; // Empieza el proceso de caída
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <matarPato+0x158>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
        coorXPatoMuerto = coorX; // Guarda la posición donde murió el pato
 800153a:	4b36      	ldr	r3, [pc, #216]	@ (8001614 <matarPato+0x140>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a3c      	ldr	r2, [pc, #240]	@ (8001630 <matarPato+0x15c>)
 8001540:	6013      	str	r3, [r2, #0]
        coorYPatoMuerto = coorY;
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <matarPato+0x148>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a3b      	ldr	r2, [pc, #236]	@ (8001634 <matarPato+0x160>)
 8001548:	6013      	str	r3, [r2, #0]

        // Dibuja el pato muerto en la posición donde fue disparado
        LCD_Sprite(coorXPatoMuerto, coorYPatoMuerto, 32, 32, muerto, 1, 0, 0, 1);
 800154a:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <matarPato+0x15c>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	4b39      	ldr	r3, [pc, #228]	@ (8001634 <matarPato+0x160>)
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	9304      	str	r3, [sp, #16]
 8001556:	2300      	movs	r3, #0
 8001558:	9303      	str	r3, [sp, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <matarPato+0x164>)
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2320      	movs	r3, #32
 8001568:	2220      	movs	r2, #32
 800156a:	f7ff fc37 	bl	8000ddc <LCD_Sprite>
        HAL_Delay(500);  // Pausa breve antes de que el pato empiece a caer
 800156e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001572:	f001 f80d 	bl	8002590 <HAL_Delay>

        // Dibuja el pato muerto en la posición donde fue disparado
        LCD_Sprite(coorXPatoMuerto, coorYPatoMuerto, 32, 32, muerto, 1, 0, 0, 1);
        HAL_Delay(500);  // Pausa breve antes de que el pato empiece a caer
    }
}
 8001576:	e049      	b.n	800160c <matarPato+0x138>
    else if ((miraX2 > coorX && miraX2 < coorX + patoWidth && miraY2 > coorY && miraY2 < coorY + patoHeight) &&
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <matarPato+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dd44      	ble.n	800160c <matarPato+0x138>
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <matarPato+0x140>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <matarPato+0x144>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	da3c      	bge.n	800160c <matarPato+0x138>
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <matarPato+0x148>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	dd37      	ble.n	800160c <matarPato+0x138>
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <matarPato+0x148>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <matarPato+0x14c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	da2f      	bge.n	800160c <matarPato+0x138>
             HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && !patoMuerto) {
 80015ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b0:	481c      	ldr	r0, [pc, #112]	@ (8001624 <matarPato+0x150>)
 80015b2:	f001 fe9b 	bl	80032ec <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
    else if ((miraX2 > coorX && miraX2 < coorX + patoWidth && miraY2 > coorY && miraY2 < coorY + patoHeight) &&
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d127      	bne.n	800160c <matarPato+0x138>
             HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && !patoMuerto) {
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <matarPato+0x154>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d123      	bne.n	800160c <matarPato+0x138>
        patoMuerto = 1;  // Indica que el pato ha sido disparado
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <matarPato+0x154>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
        patoCayendo = 1; // Empieza el proceso de caída
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <matarPato+0x158>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
        coorXPatoMuerto = coorX; // Guarda la posición donde murió el pato
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <matarPato+0x140>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <matarPato+0x15c>)
 80015d6:	6013      	str	r3, [r2, #0]
        coorYPatoMuerto = coorY;
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <matarPato+0x148>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <matarPato+0x160>)
 80015de:	6013      	str	r3, [r2, #0]
        LCD_Sprite(coorXPatoMuerto, coorYPatoMuerto, 32, 32, muerto, 1, 0, 0, 1);
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <matarPato+0x15c>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <matarPato+0x160>)
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <matarPato+0x164>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2320      	movs	r3, #32
 80015fe:	2220      	movs	r2, #32
 8001600:	f7ff fbec 	bl	8000ddc <LCD_Sprite>
        HAL_Delay(500);  // Pausa breve antes de que el pato empiece a caer
 8001604:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001608:	f000 ffc2 	bl	8002590 <HAL_Delay>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000697c 	.word	0x2000697c
 8001618:	20006984 	.word	0x20006984
 800161c:	20006980 	.word	0x20006980
 8001620:	20006988 	.word	0x20006988
 8001624:	40020400 	.word	0x40020400
 8001628:	20006aa4 	.word	0x20006aa4
 800162c:	20006aa8 	.word	0x20006aa8
 8001630:	20006aac 	.word	0x20006aac
 8001634:	20006ab0 	.word	0x20006ab0
 8001638:	20004718 	.word	0x20004718

0800163c <patorojo>:


void patorojo() {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
    if (contadorvidasP >= 1) {
 8001642:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <patorojo+0x9c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd07      	ble.n	800165a <patorojo+0x1e>
        LCD_Bitmap(120, 220, 9, 9, Rojo);  // Primer pato eliminado
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <patorojo+0xa0>)
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2309      	movs	r3, #9
 8001650:	2209      	movs	r2, #9
 8001652:	21dc      	movs	r1, #220	@ 0xdc
 8001654:	2078      	movs	r0, #120	@ 0x78
 8001656:	f7ff fb67 	bl	8000d28 <LCD_Bitmap>
    }
    if (contadorvidasP >= 2) {
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <patorojo+0x9c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	dd07      	ble.n	8001672 <patorojo+0x36>
        LCD_Bitmap(132, 220, 9, 9, Rojo);  // Segundo pato eliminado
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <patorojo+0xa0>)
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2309      	movs	r3, #9
 8001668:	2209      	movs	r2, #9
 800166a:	21dc      	movs	r1, #220	@ 0xdc
 800166c:	2084      	movs	r0, #132	@ 0x84
 800166e:	f7ff fb5b 	bl	8000d28 <LCD_Bitmap>
    }
    if (contadorvidasP >= 3) {
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <patorojo+0x9c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	dd07      	ble.n	800168a <patorojo+0x4e>
        LCD_Bitmap(144, 220, 9, 9, Rojo);  // Tercer pato eliminado
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <patorojo+0xa0>)
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2309      	movs	r3, #9
 8001680:	2209      	movs	r2, #9
 8001682:	21dc      	movs	r1, #220	@ 0xdc
 8001684:	2090      	movs	r0, #144	@ 0x90
 8001686:	f7ff fb4f 	bl	8000d28 <LCD_Bitmap>
    }
    if (contadorvidasP >= 4) {
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <patorojo+0x9c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b03      	cmp	r3, #3
 8001690:	dd07      	ble.n	80016a2 <patorojo+0x66>
        LCD_Bitmap(156, 220, 9, 9, Rojo);  // Cuarto pato eliminado
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <patorojo+0xa0>)
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2309      	movs	r3, #9
 8001698:	2209      	movs	r2, #9
 800169a:	21dc      	movs	r1, #220	@ 0xdc
 800169c:	209c      	movs	r0, #156	@ 0x9c
 800169e:	f7ff fb43 	bl	8000d28 <LCD_Bitmap>
    }
    if (contadorvidasP >= 5) {
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <patorojo+0x9c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	dd07      	ble.n	80016ba <patorojo+0x7e>
        LCD_Bitmap(168, 220, 9, 9, Rojo);  // Quinto pato eliminado
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <patorojo+0xa0>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2309      	movs	r3, #9
 80016b0:	2209      	movs	r2, #9
 80016b2:	21dc      	movs	r1, #220	@ 0xdc
 80016b4:	20a8      	movs	r0, #168	@ 0xa8
 80016b6:	f7ff fb37 	bl	8000d28 <LCD_Bitmap>
    }
    if (contadorvidasP >= 6) {
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <patorojo+0x9c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	dd07      	ble.n	80016d2 <patorojo+0x96>
        LCD_Bitmap(180, 220, 9, 9, Rojo);  // Sexto pato eliminado
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <patorojo+0xa0>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2309      	movs	r3, #9
 80016c8:	2209      	movs	r2, #9
 80016ca:	21dc      	movs	r1, #220	@ 0xdc
 80016cc:	20b4      	movs	r0, #180	@ 0xb4
 80016ce:	f7ff fb2b 	bl	8000d28 <LCD_Bitmap>
    }
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20006ab4 	.word	0x20006ab4
 80016dc:	200020cc 	.word	0x200020cc

080016e0 <caerPato>:

void caerPato() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af06      	add	r7, sp, #24
    if (patoCayendo) {
 80016e6:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <caerPato+0x154>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 809e 	beq.w	800182c <caerPato+0x14c>
        int limiteGrama = 120; // Ajusta este valor para que coincida con la altura de la grama
 80016f0:	2378      	movs	r3, #120	@ 0x78
 80016f2:	607b      	str	r3, [r7, #4]

        while (coorYPatoMuerto < limiteGrama) {
 80016f4:	e034      	b.n	8001760 <caerPato+0x80>
            // Borra la posición anterior del pato muerto redibujando el fondo en esa área
            LCD_Bitmap(coorXPatoMuerto, coorYPatoMuerto, 32, 32, fondo);
 80016f6:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <caerPato+0x158>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <caerPato+0x15c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <caerPato+0x160>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2320      	movs	r3, #32
 8001708:	2220      	movs	r2, #32
 800170a:	f7ff fb0d 	bl	8000d28 <LCD_Bitmap>

            // Mueve el pato hacia abajo
            coorYPatoMuerto += 3;  // Velocidad de caída del pato
 800170e:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <caerPato+0x15c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3303      	adds	r3, #3
 8001714:	4a49      	ldr	r2, [pc, #292]	@ (800183c <caerPato+0x15c>)
 8001716:	6013      	str	r3, [r2, #0]

            // Dibuja el pato cayendo
            animFrame = (animFrame + 1) % 3;
 8001718:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <caerPato+0x164>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1c59      	adds	r1, r3, #1
 800171e:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <caerPato+0x168>)
 8001720:	fb83 3201 	smull	r3, r2, r3, r1
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	1aca      	subs	r2, r1, r3
 8001730:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <caerPato+0x164>)
 8001732:	601a      	str	r2, [r3, #0]
            LCD_Sprite(coorXPatoMuerto, coorYPatoMuerto, 32, 32, patocayendo, 3, animFrame, 0, 1);
 8001734:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <caerPato+0x158>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	4b40      	ldr	r3, [pc, #256]	@ (800183c <caerPato+0x15c>)
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <caerPato+0x164>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	9204      	str	r2, [sp, #16]
 8001744:	2200      	movs	r2, #0
 8001746:	9203      	str	r2, [sp, #12]
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2303      	movs	r3, #3
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <caerPato+0x16c>)
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2320      	movs	r3, #32
 8001754:	2220      	movs	r2, #32
 8001756:	f7ff fb41 	bl	8000ddc <LCD_Sprite>

            HAL_Delay(50);  // Pausa para controlar la velocidad de la caída
 800175a:	2032      	movs	r0, #50	@ 0x32
 800175c:	f000 ff18 	bl	8002590 <HAL_Delay>
        while (coorYPatoMuerto < limiteGrama) {
 8001760:	4b36      	ldr	r3, [pc, #216]	@ (800183c <caerPato+0x15c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	dcc5      	bgt.n	80016f6 <caerPato+0x16>
        }

        // Cuando el pato llega al límite de la grama, se muestra el perro levantando el pato
        HAL_Delay(500);  // Pausa breve antes de mostrar el perro
 800176a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800176e:	f000 ff0f 	bl	8002590 <HAL_Delay>
        LCD_Bitmap(coorXPatoMuerto, coorYPatoMuerto, 32, 32, fondo); // Borra el pato caído
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <caerPato+0x158>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <caerPato+0x15c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <caerPato+0x160>)
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2320      	movs	r3, #32
 8001784:	2220      	movs	r2, #32
 8001786:	f7ff facf 	bl	8000d28 <LCD_Bitmap>

        // Ajustamos la posición del perro para que esté justo en la grama
        LCD_Sprite(coorXPatoMuerto - 10, limiteGrama, 46, 38, Caza, 1, 0, 0, 1); // Ajustar la posición Y para que el perro esté justo en la grama
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <caerPato+0x158>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1a3 000a 	sub.w	r0, r3, #10
 8001792:	2301      	movs	r3, #1
 8001794:	9304      	str	r3, [sp, #16]
 8001796:	2300      	movs	r3, #0
 8001798:	9303      	str	r3, [sp, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	2301      	movs	r3, #1
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <caerPato+0x170>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2326      	movs	r3, #38	@ 0x26
 80017a8:	222e      	movs	r2, #46	@ 0x2e
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f7ff fb16 	bl	8000ddc <LCD_Sprite>

        HAL_Delay(1000);  // Pausa para mostrar la animación del perro
 80017b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017b4:	f000 feec 	bl	8002590 <HAL_Delay>

        // Borra la imagen del perro después de la animación
        LCD_Bitmap(coorXPatoMuerto - 10, limiteGrama, 46, 38, fondo);
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <caerPato+0x158>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b0a      	subs	r3, #10
 80017be:	4618      	mov	r0, r3
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <caerPato+0x160>)
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2326      	movs	r3, #38	@ 0x26
 80017c8:	222e      	movs	r2, #46	@ 0x2e
 80017ca:	f7ff faad 	bl	8000d28 <LCD_Bitmap>

        // Incrementa el contador de vidas y muestra los patos eliminados
        contadorvidasP++;
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <caerPato+0x174>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <caerPato+0x174>)
 80017d6:	6013      	str	r3, [r2, #0]
        patorojo();  // Llama a la función para mostrar las vidas
 80017d8:	f7ff ff30 	bl	800163c <patorojo>

        // Verifica si se han eliminado 6 patos
        if (contadorvidasP >= 6) {
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <caerPato+0x174>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	dd17      	ble.n	8001814 <caerPato+0x134>
            // Mostrar mensaje de "Juego Terminado"
            LCD_Clear(0x00);  // Limpia la pantalla
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff f915 	bl	8000a14 <LCD_Clear>
            LCD_Print("Juego Terminado", 50, 100, 2, 0xFFFF, 0x0000);  // Muestra el mensaje
 80017ea:	2300      	movs	r3, #0
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2302      	movs	r3, #2
 80017f6:	2264      	movs	r2, #100	@ 0x64
 80017f8:	2132      	movs	r1, #50	@ 0x32
 80017fa:	4817      	ldr	r0, [pc, #92]	@ (8001858 <caerPato+0x178>)
 80017fc:	f7ff f9a8 	bl	8000b50 <LCD_Print>
            HAL_Delay(3000);  // Pausa de 3 segundos para que se vea el mensaje
 8001800:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001804:	f000 fec4 	bl	8002590 <HAL_Delay>

            // Opcional: Reiniciar el juego
            contadorvidasP = 0;  // Reinicia el contador de patos eliminados
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <caerPato+0x174>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
            menuSelection();     // Vuelve al menú principal para reiniciar el juego
 800180e:	f7ff fdd7 	bl	80013c0 <menuSelection>
            return;  // Salir de la función para no continuar
 8001812:	e00b      	b.n	800182c <caerPato+0x14c>
        }

        // Reinicia la animación del pato volando si no se ha llegado al límite de 6 patos
        patoMuerto = 0;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <caerPato+0x17c>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
        patoCayendo = 0;
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <caerPato+0x154>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
        coorX = 100;  // Reinicia la posición del pato
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <caerPato+0x180>)
 8001822:	2264      	movs	r2, #100	@ 0x64
 8001824:	601a      	str	r2, [r3, #0]
        coorY = 60;   // Reinicia la posición del pato
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <caerPato+0x184>)
 8001828:	223c      	movs	r2, #60	@ 0x3c
 800182a:	601a      	str	r2, [r3, #0]
    }
}
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20006aa8 	.word	0x20006aa8
 8001838:	20006aac 	.word	0x20006aac
 800183c:	20006ab0 	.word	0x20006ab0
 8001840:	0804b32c 	.word	0x0804b32c
 8001844:	20006aa0 	.word	0x20006aa0
 8001848:	55555556 	.word	0x55555556
 800184c:	20002f18 	.word	0x20002f18
 8001850:	20002170 	.word	0x20002170
 8001854:	20006ab4 	.word	0x20006ab4
 8001858:	08003f50 	.word	0x08003f50
 800185c:	20006aa4 	.word	0x20006aa4
 8001860:	2000697c 	.word	0x2000697c
 8001864:	20006980 	.word	0x20006980

08001868 <moverPato>:




/* Función para mover el pato */
void moverPato() {
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af06      	add	r7, sp, #24
    // Mover el primer pato
    if (!patoMuerto) {
 800186e:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa4 <moverPato+0x23c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8083 	bne.w	800197e <moverPato+0x116>
        // Borra la posición anterior del primer pato redibujando el fondo en esa área
        LCD_Bitmap(coorX, coorY, patoWidth, patoHeight, fondo);
 8001878:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa8 <moverPato+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	4b8b      	ldr	r3, [pc, #556]	@ (8001aac <moverPato+0x244>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab0 <moverPato+0x248>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab4 <moverPato+0x24c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461c      	mov	r4, r3
 8001890:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <moverPato+0x250>)
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff fa47 	bl	8000d28 <LCD_Bitmap>

        // Actualiza las coordenadas del primer pato para moverlo
        coorX += velocidadX;
 800189a:	4b83      	ldr	r3, [pc, #524]	@ (8001aa8 <moverPato+0x240>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b87      	ldr	r3, [pc, #540]	@ (8001abc <moverPato+0x254>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a80      	ldr	r2, [pc, #512]	@ (8001aa8 <moverPato+0x240>)
 80018a6:	6013      	str	r3, [r2, #0]
        coorY += velocidadY;
 80018a8:	4b80      	ldr	r3, [pc, #512]	@ (8001aac <moverPato+0x244>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b84      	ldr	r3, [pc, #528]	@ (8001ac0 <moverPato+0x258>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a7e      	ldr	r2, [pc, #504]	@ (8001aac <moverPato+0x244>)
 80018b4:	6013      	str	r3, [r2, #0]

        // Control de límites en el área azul para el primer pato
        if (coorX >= limiteDerecho - patoWidth || coorX <= limiteIzquierdo) {
 80018b6:	4b83      	ldr	r3, [pc, #524]	@ (8001ac4 <moverPato+0x25c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab0 <moverPato+0x248>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	4b79      	ldr	r3, [pc, #484]	@ (8001aa8 <moverPato+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dd05      	ble.n	80018d4 <moverPato+0x6c>
 80018c8:	4b77      	ldr	r3, [pc, #476]	@ (8001aa8 <moverPato+0x240>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac8 <moverPato+0x260>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dc0e      	bgt.n	80018f2 <moverPato+0x8a>
            velocidadX = -velocidadX;  // Cambia la dirección en X
 80018d4:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <moverPato+0x254>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	425b      	negs	r3, r3
 80018da:	4a78      	ldr	r2, [pc, #480]	@ (8001abc <moverPato+0x254>)
 80018dc:	6013      	str	r3, [r2, #0]
            direccionDerecha = !direccionDerecha;  // Cambia la dirección visual del pato
 80018de:	4b7b      	ldr	r3, [pc, #492]	@ (8001acc <moverPato+0x264>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b77      	ldr	r3, [pc, #476]	@ (8001acc <moverPato+0x264>)
 80018f0:	601a      	str	r2, [r3, #0]
        }

        if (coorY >= limiteInferior - patoHeight || coorY <= limiteSuperior) {
 80018f2:	4b77      	ldr	r3, [pc, #476]	@ (8001ad0 <moverPato+0x268>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab4 <moverPato+0x24c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	4b6b      	ldr	r3, [pc, #428]	@ (8001aac <moverPato+0x244>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	dd05      	ble.n	8001910 <moverPato+0xa8>
 8001904:	4b69      	ldr	r3, [pc, #420]	@ (8001aac <moverPato+0x244>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <moverPato+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	dc04      	bgt.n	800191a <moverPato+0xb2>
            velocidadY = -velocidadY;  // Cambia la dirección en Y
 8001910:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac0 <moverPato+0x258>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	425b      	negs	r3, r3
 8001916:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac0 <moverPato+0x258>)
 8001918:	6013      	str	r3, [r2, #0]
        }

        // Actualiza el frame de la animación de aleteo del primer pato (0, 1, 2)
        animFrame = (animFrame + 1) % 3;
 800191a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad8 <moverPato+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	4b6e      	ldr	r3, [pc, #440]	@ (8001adc <moverPato+0x274>)
 8001922:	fb83 3201 	smull	r3, r2, r3, r1
 8001926:	17cb      	asrs	r3, r1, #31
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	1aca      	subs	r2, r1, r3
 8001932:	4b69      	ldr	r3, [pc, #420]	@ (8001ad8 <moverPato+0x270>)
 8001934:	601a      	str	r2, [r3, #0]

        // Dibuja el sprite del primer pato en la nueva posición y frame de animación
        LCD_Sprite(coorX, coorY, patoWidth, patoHeight, Patos, 3, animFrame, direccionDerecha, 1);
 8001936:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa8 <moverPato+0x240>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	4b5c      	ldr	r3, [pc, #368]	@ (8001aac <moverPato+0x244>)
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <moverPato+0x248>)
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab4 <moverPato+0x24c>)
 8001944:	681d      	ldr	r5, [r3, #0]
 8001946:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <moverPato+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a60      	ldr	r2, [pc, #384]	@ (8001acc <moverPato+0x264>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	2601      	movs	r6, #1
 8001952:	9604      	str	r6, [sp, #16]
 8001954:	9203      	str	r2, [sp, #12]
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2303      	movs	r3, #3
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	4b60      	ldr	r3, [pc, #384]	@ (8001ae0 <moverPato+0x278>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	462b      	mov	r3, r5
 8001962:	4622      	mov	r2, r4
 8001964:	f7ff fa3a 	bl	8000ddc <LCD_Sprite>

        // Detecta si alguno de los jugadores ha disparado al pato
        matarPato(miraX, miraY, mira2X, mira2Y);  // Pasar las coordenadas de las dos miras al mismo tiempo
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <moverPato+0x27c>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae8 <moverPato+0x280>)
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <moverPato+0x284>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b5e      	ldr	r3, [pc, #376]	@ (8001af0 <moverPato+0x288>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f7ff fdac 	bl	80014d4 <matarPato>
 800197c:	e005      	b.n	800198a <moverPato+0x122>
    } else if (patoCayendo) {
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <moverPato+0x28c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <moverPato+0x122>
        caerPato();  // Hacer caer el primer pato
 8001986:	f7ff feab 	bl	80016e0 <caerPato>
    }

    // Si la opción es de dos patos, también mueve el segundo pato
    if (numeroPatos == 2) {
 800198a:	4b5b      	ldr	r3, [pc, #364]	@ (8001af8 <moverPato+0x290>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	f040 80c0 	bne.w	8001b14 <moverPato+0x2ac>
        if (!pato2Muerto) {
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <moverPato+0x294>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 80b5 	bne.w	8001b08 <moverPato+0x2a0>
            // Borra la posición anterior del segundo pato redibujando el fondo en esa área
            LCD_Bitmap(coorX2, coorY2, patoWidth, patoHeight, fondo);
 800199e:	4b58      	ldr	r3, [pc, #352]	@ (8001b00 <moverPato+0x298>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	4b57      	ldr	r3, [pc, #348]	@ (8001b04 <moverPato+0x29c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <moverPato+0x248>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b40      	ldr	r3, [pc, #256]	@ (8001ab4 <moverPato+0x24c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461c      	mov	r4, r3
 80019b6:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <moverPato+0x250>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4623      	mov	r3, r4
 80019bc:	f7ff f9b4 	bl	8000d28 <LCD_Bitmap>

            // Actualiza las coordenadas del segundo pato para moverlo
            coorX2 += velocidadX;
 80019c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b00 <moverPato+0x298>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <moverPato+0x254>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001b00 <moverPato+0x298>)
 80019cc:	6013      	str	r3, [r2, #0]
            coorY2 += velocidadY;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <moverPato+0x29c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <moverPato+0x258>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <moverPato+0x29c>)
 80019da:	6013      	str	r3, [r2, #0]

            // Control de límites en el área azul para el segundo pato
            if (coorX2 >= limiteDerecho - patoWidth || coorX2 <= limiteIzquierdo) {
 80019dc:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <moverPato+0x25c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <moverPato+0x248>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1ad2      	subs	r2, r2, r3
 80019e6:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <moverPato+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dd05      	ble.n	80019fa <moverPato+0x192>
 80019ee:	4b44      	ldr	r3, [pc, #272]	@ (8001b00 <moverPato+0x298>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <moverPato+0x260>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dc0e      	bgt.n	8001a18 <moverPato+0x1b0>
                velocidadX = -velocidadX;
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <moverPato+0x254>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	425b      	negs	r3, r3
 8001a00:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <moverPato+0x254>)
 8001a02:	6013      	str	r3, [r2, #0]
                direccionDerecha = !direccionDerecha;
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <moverPato+0x264>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <moverPato+0x264>)
 8001a16:	601a      	str	r2, [r3, #0]
            }

            if (coorY2 >= limiteInferior - patoHeight || coorY2 <= limiteSuperior) {
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <moverPato+0x268>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <moverPato+0x24c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	4b38      	ldr	r3, [pc, #224]	@ (8001b04 <moverPato+0x29c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dd05      	ble.n	8001a36 <moverPato+0x1ce>
 8001a2a:	4b36      	ldr	r3, [pc, #216]	@ (8001b04 <moverPato+0x29c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <moverPato+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dc04      	bgt.n	8001a40 <moverPato+0x1d8>
                velocidadY = -velocidadY;
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <moverPato+0x258>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	425b      	negs	r3, r3
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <moverPato+0x258>)
 8001a3e:	6013      	str	r3, [r2, #0]
            }

            // Actualiza el frame de la animación de aleteo del segundo pato (0, 1, 2)
            animFrame = (animFrame + 1) % 3;
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <moverPato+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <moverPato+0x274>)
 8001a48:	fb83 3201 	smull	r3, r2, r3, r1
 8001a4c:	17cb      	asrs	r3, r1, #31
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	1aca      	subs	r2, r1, r3
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <moverPato+0x270>)
 8001a5a:	601a      	str	r2, [r3, #0]

            // Dibuja el sprite del segundo pato en la nueva posición y frame de animación
            LCD_Sprite(coorX2, coorY2, patoWidth, patoHeight, Patos, 3, animFrame, direccionDerecha, 1);
 8001a5c:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <moverPato+0x298>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <moverPato+0x29c>)
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <moverPato+0x248>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <moverPato+0x24c>)
 8001a6a:	681d      	ldr	r5, [r3, #0]
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <moverPato+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	@ (8001acc <moverPato+0x264>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	2601      	movs	r6, #1
 8001a78:	9604      	str	r6, [sp, #16]
 8001a7a:	9203      	str	r2, [sp, #12]
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2303      	movs	r3, #3
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <moverPato+0x278>)
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	462b      	mov	r3, r5
 8001a88:	4622      	mov	r2, r4
 8001a8a:	f7ff f9a7 	bl	8000ddc <LCD_Sprite>

            // Detecta si alguno de los jugadores ha disparado al segundo pato
            matarPato(miraX, miraY, mira2X, mira2Y);  // Pasar las coordenadas de las dos miras al mismo tiempo
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <moverPato+0x27c>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <moverPato+0x280>)
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <moverPato+0x284>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <moverPato+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f7ff fd19 	bl	80014d4 <matarPato>
 8001aa2:	e037      	b.n	8001b14 <moverPato+0x2ac>
 8001aa4:	20006aa4 	.word	0x20006aa4
 8001aa8:	2000697c 	.word	0x2000697c
 8001aac:	20006980 	.word	0x20006980
 8001ab0:	20006984 	.word	0x20006984
 8001ab4:	20006988 	.word	0x20006988
 8001ab8:	0804b32c 	.word	0x0804b32c
 8001abc:	2000698c 	.word	0x2000698c
 8001ac0:	20006990 	.word	0x20006990
 8001ac4:	20006998 	.word	0x20006998
 8001ac8:	20006a9c 	.word	0x20006a9c
 8001acc:	2000699c 	.word	0x2000699c
 8001ad0:	20006994 	.word	0x20006994
 8001ad4:	20006a98 	.word	0x20006a98
 8001ad8:	20006aa0 	.word	0x20006aa0
 8001adc:	55555556 	.word	0x55555556
 8001ae0:	200053c4 	.word	0x200053c4
 8001ae4:	200069a0 	.word	0x200069a0
 8001ae8:	200069a4 	.word	0x200069a4
 8001aec:	200069c4 	.word	0x200069c4
 8001af0:	200069c8 	.word	0x200069c8
 8001af4:	20006aa8 	.word	0x20006aa8
 8001af8:	200069b8 	.word	0x200069b8
 8001afc:	20006ab8 	.word	0x20006ab8
 8001b00:	200069b0 	.word	0x200069b0
 8001b04:	200069b4 	.word	0x200069b4
        } else if (pato2Cayendo) {
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <moverPato+0x2bc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <moverPato+0x2ac>
            caerPato2();  // Hacer caer el segundo pato
 8001b10:	f000 f80a 	bl	8001b28 <caerPato2>
        }
    }

    HAL_Delay(50);  // Control de velocidad del movimiento del pato
 8001b14:	2032      	movs	r0, #50	@ 0x32
 8001b16:	f000 fd3b 	bl	8002590 <HAL_Delay>
}
 8001b1a:	bf00      	nop
 8001b1c:	3704      	adds	r7, #4
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20006abc 	.word	0x20006abc

08001b28 <caerPato2>:

        LCD_Sprite(coorXPato2Muerto, coorYPato2Muerto, 32, 32, muerto, 1, 0, 0, 1);
        HAL_Delay(500);
    }
}
void caerPato2() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af06      	add	r7, sp, #24
    if (pato2Cayendo) {
 8001b2e:	4b45      	ldr	r3, [pc, #276]	@ (8001c44 <caerPato2+0x11c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8082 	beq.w	8001c3c <caerPato2+0x114>
        int limiteGrama = 120;
 8001b38:	2378      	movs	r3, #120	@ 0x78
 8001b3a:	607b      	str	r3, [r7, #4]

        while (coorYPato2Muerto < limiteGrama) {
 8001b3c:	e034      	b.n	8001ba8 <caerPato2+0x80>
            LCD_Bitmap(coorXPato2Muerto, coorYPato2Muerto, 32, 32, fondo);
 8001b3e:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <caerPato2+0x120>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <caerPato2+0x124>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4b41      	ldr	r3, [pc, #260]	@ (8001c50 <caerPato2+0x128>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2320      	movs	r3, #32
 8001b50:	2220      	movs	r2, #32
 8001b52:	f7ff f8e9 	bl	8000d28 <LCD_Bitmap>
            coorYPato2Muerto += 3;
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <caerPato2+0x124>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3303      	adds	r3, #3
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <caerPato2+0x124>)
 8001b5e:	6013      	str	r3, [r2, #0]

            animFrame = (animFrame + 1) % 3;
 8001b60:	4b3c      	ldr	r3, [pc, #240]	@ (8001c54 <caerPato2+0x12c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <caerPato2+0x130>)
 8001b68:	fb83 3201 	smull	r3, r2, r3, r1
 8001b6c:	17cb      	asrs	r3, r1, #31
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	1aca      	subs	r2, r1, r3
 8001b78:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <caerPato2+0x12c>)
 8001b7a:	601a      	str	r2, [r3, #0]
            LCD_Sprite(coorXPato2Muerto, coorYPato2Muerto, 32, 32, patocayendo, 3, animFrame, 0, 1);
 8001b7c:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <caerPato2+0x120>)
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <caerPato2+0x124>)
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <caerPato2+0x12c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	9204      	str	r2, [sp, #16]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9203      	str	r2, [sp, #12]
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2303      	movs	r3, #3
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <caerPato2+0x134>)
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f7ff f91d 	bl	8000ddc <LCD_Sprite>
            HAL_Delay(50);
 8001ba2:	2032      	movs	r0, #50	@ 0x32
 8001ba4:	f000 fcf4 	bl	8002590 <HAL_Delay>
        while (coorYPato2Muerto < limiteGrama) {
 8001ba8:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <caerPato2+0x124>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dcc5      	bgt.n	8001b3e <caerPato2+0x16>
        }

        HAL_Delay(500);
 8001bb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb6:	f000 fceb 	bl	8002590 <HAL_Delay>
        LCD_Bitmap(coorXPato2Muerto, coorYPato2Muerto, 32, 32, fondo);
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <caerPato2+0x120>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <caerPato2+0x124>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <caerPato2+0x128>)
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2320      	movs	r3, #32
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f7ff f8ab 	bl	8000d28 <LCD_Bitmap>
        LCD_Sprite(coorXPato2Muerto - 10, limiteGrama, 46, 38, Caza, 1, 0, 0, 1);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <caerPato2+0x120>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1a3 000a 	sub.w	r0, r3, #10
 8001bda:	2301      	movs	r3, #1
 8001bdc:	9304      	str	r3, [sp, #16]
 8001bde:	2300      	movs	r3, #0
 8001be0:	9303      	str	r3, [sp, #12]
 8001be2:	2300      	movs	r3, #0
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <caerPato2+0x138>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2326      	movs	r3, #38	@ 0x26
 8001bf0:	222e      	movs	r2, #46	@ 0x2e
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f7ff f8f2 	bl	8000ddc <LCD_Sprite>

        HAL_Delay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bfc:	f000 fcc8 	bl	8002590 <HAL_Delay>
        LCD_Bitmap(coorXPato2Muerto - 10, limiteGrama, 46, 38, fondo);
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <caerPato2+0x120>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3b0a      	subs	r3, #10
 8001c06:	4618      	mov	r0, r3
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <caerPato2+0x128>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2326      	movs	r3, #38	@ 0x26
 8001c10:	222e      	movs	r2, #46	@ 0x2e
 8001c12:	f7ff f889 	bl	8000d28 <LCD_Bitmap>

        contadorvidasP++;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <caerPato2+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a11      	ldr	r2, [pc, #68]	@ (8001c64 <caerPato2+0x13c>)
 8001c1e:	6013      	str	r3, [r2, #0]
        patorojo();
 8001c20:	f7ff fd0c 	bl	800163c <patorojo>

        pato2Muerto = 0;
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <caerPato2+0x140>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
        pato2Cayendo = 0;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <caerPato2+0x11c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
        coorX2 = 150;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <caerPato2+0x144>)
 8001c32:	2296      	movs	r2, #150	@ 0x96
 8001c34:	601a      	str	r2, [r3, #0]
        coorY2 = 80;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <caerPato2+0x148>)
 8001c38:	2250      	movs	r2, #80	@ 0x50
 8001c3a:	601a      	str	r2, [r3, #0]
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20006abc 	.word	0x20006abc
 8001c48:	20006ac0 	.word	0x20006ac0
 8001c4c:	20006ac4 	.word	0x20006ac4
 8001c50:	0804b32c 	.word	0x0804b32c
 8001c54:	20006aa0 	.word	0x20006aa0
 8001c58:	55555556 	.word	0x55555556
 8001c5c:	20002f18 	.word	0x20002f18
 8001c60:	20002170 	.word	0x20002170
 8001c64:	20006ab4 	.word	0x20006ab4
 8001c68:	20006ab8 	.word	0x20006ab8
 8001c6c:	200069b0 	.word	0x200069b0
 8001c70:	200069b4 	.word	0x200069b4

08001c74 <moverMira>:


void moverMira() {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af06      	add	r7, sp, #24
    // Leer valores del joystick del primer jugador (mira1)
    int xValue1 = Read_ADC(ADC_CHANNEL_9);  // Leer el valor X del joystick 1
 8001c7a:	2009      	movs	r0, #9
 8001c7c:	f7ff f95a 	bl	8000f34 <Read_ADC>
 8001c80:	60f8      	str	r0, [r7, #12]
    int yValue1 = Read_ADC(ADC_CHANNEL_12);  // Leer el valor Y del joystick 1
 8001c82:	200c      	movs	r0, #12
 8001c84:	f7ff f956 	bl	8000f34 <Read_ADC>
 8001c88:	60b8      	str	r0, [r7, #8]

    // Actualiza la posición de la mira del primer jugador
    miraX += (xValue1 - 2048) / 100;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001c90:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <moverMira+0x1f0>)
 8001c92:	fb82 1203 	smull	r1, r2, r2, r3
 8001c96:	1152      	asrs	r2, r2, #5
 8001c98:	17db      	asrs	r3, r3, #31
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	4b72      	ldr	r3, [pc, #456]	@ (8001e68 <moverMira+0x1f4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a71      	ldr	r2, [pc, #452]	@ (8001e68 <moverMira+0x1f4>)
 8001ca4:	6013      	str	r3, [r2, #0]
    miraY += (yValue1 - 2048) / 100;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001cac:	4a6d      	ldr	r2, [pc, #436]	@ (8001e64 <moverMira+0x1f0>)
 8001cae:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb2:	1152      	asrs	r2, r2, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1ad2      	subs	r2, r2, r3
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e6c <moverMira+0x1f8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8001e6c <moverMira+0x1f8>)
 8001cc0:	6013      	str	r3, [r2, #0]

    // Limita la posición de la mira dentro del área permitida (jugador 1)
    if (miraX < limiteIzquierdo) miraX = limiteIzquierdo;
 8001cc2:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <moverMira+0x1f4>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <moverMira+0x1fc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	da03      	bge.n	8001cd6 <moverMira+0x62>
 8001cce:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <moverMira+0x1fc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a65      	ldr	r2, [pc, #404]	@ (8001e68 <moverMira+0x1f4>)
 8001cd4:	6013      	str	r3, [r2, #0]
    if (miraX > limiteDerecho - 26) miraX = limiteDerecho - 26;  // 26 es el ancho de la mira
 8001cd6:	4b67      	ldr	r3, [pc, #412]	@ (8001e74 <moverMira+0x200>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1a3 0219 	sub.w	r2, r3, #25
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <moverMira+0x1f4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dc04      	bgt.n	8001cf0 <moverMira+0x7c>
 8001ce6:	4b63      	ldr	r3, [pc, #396]	@ (8001e74 <moverMira+0x200>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3b1a      	subs	r3, #26
 8001cec:	4a5e      	ldr	r2, [pc, #376]	@ (8001e68 <moverMira+0x1f4>)
 8001cee:	6013      	str	r3, [r2, #0]
    if (miraY < limiteSuperior) miraY = limiteSuperior;
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <moverMira+0x1f8>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b60      	ldr	r3, [pc, #384]	@ (8001e78 <moverMira+0x204>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	da03      	bge.n	8001d04 <moverMira+0x90>
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <moverMira+0x204>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5a      	ldr	r2, [pc, #360]	@ (8001e6c <moverMira+0x1f8>)
 8001d02:	6013      	str	r3, [r2, #0]
    if (miraY > limiteInferior - 23) miraY = limiteInferior - 23;  // 23 es el alto de la mira
 8001d04:	4b5d      	ldr	r3, [pc, #372]	@ (8001e7c <moverMira+0x208>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1a3 0216 	sub.w	r2, r3, #22
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <moverMira+0x1f8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dc04      	bgt.n	8001d1e <moverMira+0xaa>
 8001d14:	4b59      	ldr	r3, [pc, #356]	@ (8001e7c <moverMira+0x208>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b17      	subs	r3, #23
 8001d1a:	4a54      	ldr	r2, [pc, #336]	@ (8001e6c <moverMira+0x1f8>)
 8001d1c:	6013      	str	r3, [r2, #0]

    // Limpiar la posición anterior de la mira del jugador 1 redibujando el fondo en esa área
    LCD_Bitmap(lastMiraX, lastMiraY, 26, 23, fondo);
 8001d1e:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <moverMira+0x20c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <moverMira+0x210>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4b57      	ldr	r3, [pc, #348]	@ (8001e88 <moverMira+0x214>)
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2317      	movs	r3, #23
 8001d30:	221a      	movs	r2, #26
 8001d32:	f7fe fff9 	bl	8000d28 <LCD_Bitmap>

    // Dibuja la mira del jugador 1 en su nueva posición
    LCD_Sprite(miraX, miraY, 26, 23, mira1, 1, 0, 0, 1);
 8001d36:	4b4c      	ldr	r3, [pc, #304]	@ (8001e68 <moverMira+0x1f4>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e6c <moverMira+0x1f8>)
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9303      	str	r3, [sp, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e8c <moverMira+0x218>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2317      	movs	r3, #23
 8001d54:	221a      	movs	r2, #26
 8001d56:	f7ff f841 	bl	8000ddc <LCD_Sprite>

    // Actualiza la posición anterior de la mira del jugador 1
    lastMiraX = miraX;
 8001d5a:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <moverMira+0x1f4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a48      	ldr	r2, [pc, #288]	@ (8001e80 <moverMira+0x20c>)
 8001d60:	6013      	str	r3, [r2, #0]
    lastMiraY = miraY;
 8001d62:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <moverMira+0x1f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <moverMira+0x210>)
 8001d68:	6013      	str	r3, [r2, #0]

    // Leer valores del joystick del segundo jugador (mira2)
    int xValue2 = Read_ADC(ADC_CHANNEL_14);  // Leer el valor X del joystick 2 (canal 14)
 8001d6a:	200e      	movs	r0, #14
 8001d6c:	f7ff f8e2 	bl	8000f34 <Read_ADC>
 8001d70:	6078      	str	r0, [r7, #4]
    int yValue2 = Read_ADC(ADC_CHANNEL_15);  // Leer el valor Y del joystick 2 (canal 15)
 8001d72:	200f      	movs	r0, #15
 8001d74:	f7ff f8de 	bl	8000f34 <Read_ADC>
 8001d78:	6038      	str	r0, [r7, #0]

    // Actualiza la posición de la mira del segundo jugador
    mira2X += (xValue2 - 2048) / 100;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001d80:	4a38      	ldr	r2, [pc, #224]	@ (8001e64 <moverMira+0x1f0>)
 8001d82:	fb82 1203 	smull	r1, r2, r2, r3
 8001d86:	1152      	asrs	r2, r2, #5
 8001d88:	17db      	asrs	r3, r3, #31
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	4b40      	ldr	r3, [pc, #256]	@ (8001e90 <moverMira+0x21c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a3f      	ldr	r2, [pc, #252]	@ (8001e90 <moverMira+0x21c>)
 8001d94:	6013      	str	r3, [r2, #0]
    mira2Y += (yValue2 - 2048) / 100;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001d9c:	4a31      	ldr	r2, [pc, #196]	@ (8001e64 <moverMira+0x1f0>)
 8001d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001da2:	1152      	asrs	r2, r2, #5
 8001da4:	17db      	asrs	r3, r3, #31
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <moverMira+0x220>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a39      	ldr	r2, [pc, #228]	@ (8001e94 <moverMira+0x220>)
 8001db0:	6013      	str	r3, [r2, #0]

    // Limita la posición de la mira dentro del área permitida (jugador 2)
    if (mira2X < limiteIzquierdo) mira2X = limiteIzquierdo;
 8001db2:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <moverMira+0x21c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <moverMira+0x1fc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	da03      	bge.n	8001dc6 <moverMira+0x152>
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <moverMira+0x1fc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a33      	ldr	r2, [pc, #204]	@ (8001e90 <moverMira+0x21c>)
 8001dc4:	6013      	str	r3, [r2, #0]
    if (mira2X > limiteDerecho - 26) mira2X = limiteDerecho - 26;  // 26 es el ancho de la mira
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <moverMira+0x200>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1a3 0219 	sub.w	r2, r3, #25
 8001dce:	4b30      	ldr	r3, [pc, #192]	@ (8001e90 <moverMira+0x21c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	dc04      	bgt.n	8001de0 <moverMira+0x16c>
 8001dd6:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <moverMira+0x200>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3b1a      	subs	r3, #26
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e90 <moverMira+0x21c>)
 8001dde:	6013      	str	r3, [r2, #0]
    if (mira2Y < limiteSuperior) mira2Y = limiteSuperior;
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <moverMira+0x220>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <moverMira+0x204>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	da03      	bge.n	8001df4 <moverMira+0x180>
 8001dec:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <moverMira+0x204>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a28      	ldr	r2, [pc, #160]	@ (8001e94 <moverMira+0x220>)
 8001df2:	6013      	str	r3, [r2, #0]
    if (mira2Y > limiteInferior - 23) mira2Y = limiteInferior - 23;  // 23 es el alto de la mira
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <moverMira+0x208>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1a3 0216 	sub.w	r2, r3, #22
 8001dfc:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <moverMira+0x220>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dc04      	bgt.n	8001e0e <moverMira+0x19a>
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <moverMira+0x208>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3b17      	subs	r3, #23
 8001e0a:	4a22      	ldr	r2, [pc, #136]	@ (8001e94 <moverMira+0x220>)
 8001e0c:	6013      	str	r3, [r2, #0]

    // Limpiar la posición anterior de la mira del jugador 2 redibujando el fondo en esa área
    LCD_Bitmap(lastMira2X, lastMira2Y, 26, 23, fondo);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <moverMira+0x224>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <moverMira+0x228>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <moverMira+0x214>)
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2317      	movs	r3, #23
 8001e20:	221a      	movs	r2, #26
 8001e22:	f7fe ff81 	bl	8000d28 <LCD_Bitmap>

    // Dibuja la mira del jugador 2 en su nueva posición
    LCD_Sprite(mira2X, mira2Y, 26, 23, mira2, 1, 0, 0, 1);
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <moverMira+0x21c>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <moverMira+0x220>)
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9304      	str	r3, [sp, #16]
 8001e32:	2300      	movs	r3, #0
 8001e34:	9303      	str	r3, [sp, #12]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <moverMira+0x22c>)
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2317      	movs	r3, #23
 8001e44:	221a      	movs	r2, #26
 8001e46:	f7fe ffc9 	bl	8000ddc <LCD_Sprite>

    // Actualiza la posición anterior de la mira del jugador 2
    lastMira2X = mira2X;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <moverMira+0x21c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <moverMira+0x224>)
 8001e50:	6013      	str	r3, [r2, #0]
    lastMira2Y = mira2Y;
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <moverMira+0x220>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <moverMira+0x228>)
 8001e58:	6013      	str	r3, [r2, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	51eb851f 	.word	0x51eb851f
 8001e68:	200069a0 	.word	0x200069a0
 8001e6c:	200069a4 	.word	0x200069a4
 8001e70:	20006a9c 	.word	0x20006a9c
 8001e74:	20006998 	.word	0x20006998
 8001e78:	20006a98 	.word	0x20006a98
 8001e7c:	20006994 	.word	0x20006994
 8001e80:	200069a8 	.word	0x200069a8
 8001e84:	200069ac 	.word	0x200069ac
 8001e88:	0804b32c 	.word	0x0804b32c
 8001e8c:	20004f18 	.word	0x20004f18
 8001e90:	200069c4 	.word	0x200069c4
 8001e94:	200069c8 	.word	0x200069c8
 8001e98:	200069bc 	.word	0x200069bc
 8001e9c:	200069c0 	.word	0x200069c0
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eaa:	f000 faff 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eae:	f000 f82d 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb2:	f000 f91f 	bl	80020f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001eb6:	f000 f8e7 	bl	8002088 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001eba:	f000 f893 	bl	8001fe4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001ebe:	f7fe fb21 	bl	8000504 <LCD_Init>
  FillRect(0, 0, 320, 240, 0x00);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	23f0      	movs	r3, #240	@ 0xf0
 8001ec8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7fe fde4 	bl	8000a9c <FillRect>
  LCD_Bitmap(0, 0, 277, 270, menu);  // Menú del juego
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <main+0x64>)
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8001edc:	f240 1215 	movw	r2, #277	@ 0x115
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7fe ff20 	bl	8000d28 <LCD_Bitmap>
  HAL_Delay(2000);
 8001ee8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eec:	f000 fb50 	bl	8002590 <HAL_Delay>
  LCD_Clear(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7fe fd8f 	bl	8000a14 <LCD_Clear>

  menuSelection();  // Llama a la función para manejar el menú
 8001ef6:	f7ff fa63 	bl	80013c0 <menuSelection>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    moverPato();  // Llamar a la función para mover el pato
 8001efa:	f7ff fcb5 	bl	8001868 <moverPato>
    moverMira();
 8001efe:	f7ff feb9 	bl	8001c74 <moverMira>
    moverPato();  // Llamar a la función para mover el pato
 8001f02:	bf00      	nop
 8001f04:	e7f9      	b.n	8001efa <main+0x56>
 8001f06:	bf00      	nop
 8001f08:	08026ae0 	.word	0x08026ae0

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b094      	sub	sp, #80	@ 0x50
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	2234      	movs	r2, #52	@ 0x34
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 ffcf 	bl	8003ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f40:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <SystemClock_Config+0xd4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f58:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <SystemClock_Config+0xd4>)
 8001f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <SystemClock_Config+0xd4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f74:	2310      	movs	r3, #16
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f80:	2308      	movs	r3, #8
 8001f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001f84:	2350      	movs	r3, #80	@ 0x50
 8001f86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fc69 	bl	8003870 <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001fa4:	f000 f940 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f9c3 	bl	8003350 <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001fd0:	f000 f92a 	bl	8002228 <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	@ 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_ADC1_Init+0x98>)
 8001ff8:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <MX_ADC1_Init+0x9c>)
 8001ffa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_ADC1_Init+0x98>)
 8001ffe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002002:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_ADC1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_ADC1_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_ADC1_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_ADC1_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_ADC1_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_ADC1_Init+0x98>)
 8002026:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <MX_ADC1_Init+0xa0>)
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_ADC1_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_ADC1_Init+0x98>)
 8002032:	2201      	movs	r2, #1
 8002034:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_ADC1_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800203e:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_ADC1_Init+0x98>)
 8002040:	2201      	movs	r2, #1
 8002042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002044:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_ADC1_Init+0x98>)
 8002046:	f000 fac7 	bl	80025d8 <HAL_ADC_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002050:	f000 f8ea 	bl	8002228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002054:	2309      	movs	r3, #9
 8002056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002058:	2301      	movs	r3, #1
 800205a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_ADC1_Init+0x98>)
 8002066:	f000 fc99 	bl	800299c <HAL_ADC_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002070:	f000 f8da 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200069f4 	.word	0x200069f4
 8002080:	40012000 	.word	0x40012000
 8002084:	0f000001 	.word	0x0f000001

08002088 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800208c:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <MX_SPI1_Init+0x64>)
 800208e:	4a18      	ldr	r2, [pc, #96]	@ (80020f0 <MX_SPI1_Init+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <MX_SPI1_Init+0x64>)
 8002094:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209a:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020d4:	220a      	movs	r2, #10
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	@ (80020ec <MX_SPI1_Init+0x64>)
 80020da:	f001 fe67 	bl	8003dac <HAL_SPI_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e4:	f000 f8a0 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20006a3c 	.word	0x20006a3c
 80020f0:	40013000 	.word	0x40013000

080020f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a41      	ldr	r2, [pc, #260]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <MX_GPIO_Init+0x124>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <MX_GPIO_Init+0x124>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a3a      	ldr	r2, [pc, #232]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a33      	ldr	r2, [pc, #204]	@ (8002218 <MX_GPIO_Init+0x124>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a2c      	ldr	r2, [pc, #176]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <MX_GPIO_Init+0x124>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2182      	movs	r1, #130	@ 0x82
 800217e:	4827      	ldr	r0, [pc, #156]	@ (800221c <MX_GPIO_Init+0x128>)
 8002180:	f001 f8cc 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8002184:	2200      	movs	r2, #0
 8002186:	f240 7113 	movw	r1, #1811	@ 0x713
 800218a:	4825      	ldr	r0, [pc, #148]	@ (8002220 <MX_GPIO_Init+0x12c>)
 800218c:	f001 f8c6 	bl	800331c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f240 4179 	movw	r1, #1145	@ 0x479
 8002196:	4823      	ldr	r0, [pc, #140]	@ (8002224 <MX_GPIO_Init+0x130>)
 8002198:	f001 f8c0 	bl	800331c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800219c:	2382      	movs	r3, #130	@ 0x82
 800219e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	481a      	ldr	r0, [pc, #104]	@ (800221c <MX_GPIO_Init+0x128>)
 80021b4:	f000 ff06 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80021b8:	f240 7313 	movw	r3, #1811	@ 0x713
 80021bc:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4813      	ldr	r0, [pc, #76]	@ (8002220 <MX_GPIO_Init+0x12c>)
 80021d2:	f000 fef7 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80021d6:	f240 4379 	movw	r3, #1145	@ 0x479
 80021da:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	480d      	ldr	r0, [pc, #52]	@ (8002224 <MX_GPIO_Init+0x130>)
 80021f0:	f000 fee8 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021f4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4806      	ldr	r0, [pc, #24]	@ (8002224 <MX_GPIO_Init+0x130>)
 800220a:	f000 fedb 	bl	8002fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40020800 	.word	0x40020800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <Error_Handler+0x8>

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	4a0f      	ldr	r2, [pc, #60]	@ (8002280 <HAL_MspInit+0x4c>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002248:	6453      	str	r3, [r2, #68]	@ 0x44
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <HAL_MspInit+0x4c>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a24      	ldr	r2, [pc, #144]	@ (8002334 <HAL_ADC_MspInit+0xb0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d141      	bne.n	800232a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	4a22      	ldr	r2, [pc, #136]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_ADC_MspInit+0xb4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80022fa:	2334      	movs	r3, #52	@ 0x34
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fe:	2303      	movs	r3, #3
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <HAL_ADC_MspInit+0xb8>)
 800230e:	f000 fe59 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002312:	2302      	movs	r3, #2
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002316:	2303      	movs	r3, #3
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4806      	ldr	r0, [pc, #24]	@ (8002340 <HAL_ADC_MspInit+0xbc>)
 8002326:	f000 fe4d 	bl	8002fc4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	@ 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40012000 	.word	0x40012000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020800 	.word	0x40020800
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	@ 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_SPI_MspInit+0x84>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12b      	bne.n	80023be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002374:	6453      	str	r3, [r2, #68]	@ 0x44
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800239e:	23e0      	movs	r3, #224	@ 0xe0
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ae:	2305      	movs	r3, #5
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <HAL_SPI_MspInit+0x8c>)
 80023ba:	f000 fe03 	bl	8002fc4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	@ 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40013000 	.word	0x40013000
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <MemManage_Handler+0x4>

080023ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f891 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <Reset_Handler>:
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002490 <LoopFillZerobss+0xe>
 800245c:	f7ff ffea 	bl	8002434 <SystemInit>
 8002460:	480c      	ldr	r0, [pc, #48]	@ (8002494 <LoopFillZerobss+0x12>)
 8002462:	490d      	ldr	r1, [pc, #52]	@ (8002498 <LoopFillZerobss+0x16>)
 8002464:	4a0d      	ldr	r2, [pc, #52]	@ (800249c <LoopFillZerobss+0x1a>)
 8002466:	2300      	movs	r3, #0
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:
 800246a:	58d4      	ldr	r4, [r2, r3]
 800246c:	50c4      	str	r4, [r0, r3]
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:
 8002470:	18c4      	adds	r4, r0, r3
 8002472:	428c      	cmp	r4, r1
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <LoopFillZerobss+0x1e>)
 8002478:	4c0a      	ldr	r4, [pc, #40]	@ (80024a4 <LoopFillZerobss+0x22>)
 800247a:	2300      	movs	r3, #0
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:
 8002482:	42a2      	cmp	r2, r4
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>
 8002486:	f001 fd23 	bl	8003ed0 <__libc_init_array>
 800248a:	f7ff fd0b 	bl	8001ea4 <main>
 800248e:	4770      	bx	lr
 8002490:	20020000 	.word	0x20020000
 8002494:	20000000 	.word	0x20000000
 8002498:	200069d8 	.word	0x200069d8
 800249c:	08070b4c 	.word	0x08070b4c
 80024a0:	200069d8 	.word	0x200069d8
 80024a4:	20006ad0 	.word	0x20006ad0

080024a8 <ADC_IRQHandler>:
 80024a8:	e7fe      	b.n	80024a8 <ADC_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b0:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_Init+0x40>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_Init+0x40>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <HAL_Init+0x40>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 fd41 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f000 f808 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff fea8 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_InitTick+0x54>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_InitTick+0x58>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fd4b 	bl	8002faa <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f000 fd21 	bl	8002f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <HAL_InitTick+0x5c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200069cc 	.word	0x200069cc
 8002548:	200069d4 	.word	0x200069d4
 800254c:	200069d0 	.word	0x200069d0

08002550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200069d4 	.word	0x200069d4
 8002574:	20006acc 	.word	0x20006acc

08002578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20006acc 	.word	0x20006acc

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffde 	bl	8002578 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200069d4 	.word	0x200069d4

080025d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e033      	b.n	8002656 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fe44 	bl	8002284 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800261e:	f023 0302 	bic.w	r3, r3, #2
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fae8 	bl	8002c00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	@ 0x40
 8002646:	e001      	b.n	800264c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADC_Start+0x1a>
 8002676:	2302      	movs	r3, #2
 8002678:	e0b2      	b.n	80027e0 <HAL_ADC_Start+0x180>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d018      	beq.n	80026c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026a0:	4b52      	ldr	r3, [pc, #328]	@ (80027ec <HAL_ADC_Start+0x18c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a52      	ldr	r2, [pc, #328]	@ (80027f0 <HAL_ADC_Start+0x190>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9a      	lsrs	r2, r3, #18
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d17a      	bne.n	80027c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270e:	d106      	bne.n	800271e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	f023 0206 	bic.w	r2, r3, #6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44
 800271c:	e002      	b.n	8002724 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800272c:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <HAL_ADC_Start+0x194>)
 800272e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002738:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12a      	bne.n	800279c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <HAL_ADC_Start+0x198>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d015      	beq.n	800277c <HAL_ADC_Start+0x11c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a29      	ldr	r2, [pc, #164]	@ (80027fc <HAL_ADC_Start+0x19c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d105      	bne.n	8002766 <HAL_ADC_Start+0x106>
 800275a:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_ADC_Start+0x194>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <HAL_ADC_Start+0x1a0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d136      	bne.n	80027de <HAL_ADC_Start+0x17e>
 8002770:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_ADC_Start+0x194>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d130      	bne.n	80027de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d129      	bne.n	80027de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	e020      	b.n	80027de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a15      	ldr	r2, [pc, #84]	@ (80027f8 <HAL_ADC_Start+0x198>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11b      	bne.n	80027de <HAL_ADC_Start+0x17e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d114      	bne.n	80027de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	e00b      	b.n	80027de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	200069cc 	.word	0x200069cc
 80027f0:	431bde83 	.word	0x431bde83
 80027f4:	40012300 	.word	0x40012300
 80027f8:	40012000 	.word	0x40012000
 80027fc:	40012100 	.word	0x40012100
 8002800:	40012200 	.word	0x40012200

08002804 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_Stop+0x16>
 8002816:	2302      	movs	r3, #2
 8002818:	e021      	b.n	800285e <HAL_ADC_Stop+0x5a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002886:	d113      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002896:	d10b      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e063      	b.n	8002978 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b0:	f7ff fe62 	bl	8002578 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028b6:	e021      	b.n	80028fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d01d      	beq.n	80028fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_ADC_PollForConversion+0x6c>
 80028c6:	f7ff fe57 	bl	8002578 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d212      	bcs.n	80028fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d00b      	beq.n	80028fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e03d      	b.n	8002978 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d1d6      	bne.n	80028b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0212 	mvn.w	r2, #18
 8002912:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d123      	bne.n	8002976 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d11f      	bne.n	8002976 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800294e:	2b00      	cmp	r3, #0
 8002950:	d111      	bne.n	8002976 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e113      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x244>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d925      	bls.n	8002a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	3b1e      	subs	r3, #30
 80029de:	2207      	movs	r2, #7
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43da      	mvns	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68d9      	ldr	r1, [r3, #12]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4403      	add	r3, r0
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	e022      	b.n	8002a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6919      	ldr	r1, [r3, #16]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	2207      	movs	r2, #7
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4403      	add	r3, r0
 8002a50:	409a      	lsls	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d824      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b05      	subs	r3, #5
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b05      	subs	r3, #5
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aaa:	e04c      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d824      	bhi.n	8002afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b23      	subs	r3, #35	@ 0x23
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b23      	subs	r3, #35	@ 0x23
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002afc:	e023      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b41      	subs	r3, #65	@ 0x41
 8002b10:	221f      	movs	r2, #31
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	3b41      	subs	r3, #65	@ 0x41
 8002b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b46:	4b29      	ldr	r3, [pc, #164]	@ (8002bec <HAL_ADC_ConfigChannel+0x250>)
 8002b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a28      	ldr	r2, [pc, #160]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x254>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10f      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d8>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b12      	cmp	r3, #18
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x254>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12b      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x258>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x1f4>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b11      	cmp	r3, #17
 8002b8e:	d122      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x258>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d111      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x25c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_ADC_ConfigChannel+0x260>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9a      	lsrs	r2, r3, #18
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	40012000 	.word	0x40012000
 8002bf4:	10000012 	.word	0x10000012
 8002bf8:	200069cc 	.word	0x200069cc
 8002bfc:	431bde83 	.word	0x431bde83

08002c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c08:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <ADC_Init+0x1f0>)
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	021a      	lsls	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	4a58      	ldr	r2, [pc, #352]	@ (8002df4 <ADC_Init+0x1f4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e00f      	b.n	8002cfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0202 	bic.w	r2, r2, #2
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7e1b      	ldrb	r3, [r3, #24]
 8002d18:	005a      	lsls	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01b      	beq.n	8002d64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	3b01      	subs	r3, #1
 8002d58:	035a      	lsls	r2, r3, #13
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	e007      	b.n	8002d74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	051a      	lsls	r2, r3, #20
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002db6:	025a      	lsls	r2, r3, #9
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	029a      	lsls	r2, r3, #10
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40012300 	.word	0x40012300
 8002df4:	0f000001 	.word	0x0f000001

08002df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60d3      	str	r3, [r2, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__NVIC_GetPriorityGrouping+0x18>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0307 	and.w	r3, r3, #7
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	@ (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	@ 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f28:	d301      	bcc.n	8002f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <SysTick_Config+0x40>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f36:	210f      	movs	r1, #15
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f7ff ff8e 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <SysTick_Config+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <SysTick_Config+0x40>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff47 	bl	8002df8 <__NVIC_SetPriorityGrouping>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f84:	f7ff ff5c 	bl	8002e40 <__NVIC_GetPriorityGrouping>
 8002f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f7ff ff8e 	bl	8002eb0 <NVIC_EncodePriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffb0 	bl	8002f18 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	@ 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e165      	b.n	80032ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 8154 	bne.w	80032a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ae 	beq.w	80032a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <HAL_GPIO_Init+0x300>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	4a5c      	ldr	r2, [pc, #368]	@ (80032c4 <HAL_GPIO_Init+0x300>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003158:	6453      	str	r3, [r2, #68]	@ 0x44
 800315a:	4b5a      	ldr	r3, [pc, #360]	@ (80032c4 <HAL_GPIO_Init+0x300>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <HAL_GPIO_Init+0x304>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4f      	ldr	r2, [pc, #316]	@ (80032cc <HAL_GPIO_Init+0x308>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d025      	beq.n	80031de <HAL_GPIO_Init+0x21a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4e      	ldr	r2, [pc, #312]	@ (80032d0 <HAL_GPIO_Init+0x30c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <HAL_GPIO_Init+0x216>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_GPIO_Init+0x310>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d019      	beq.n	80031d6 <HAL_GPIO_Init+0x212>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	@ (80032d8 <HAL_GPIO_Init+0x314>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	@ (80032dc <HAL_GPIO_Init+0x318>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00d      	beq.n	80031ce <HAL_GPIO_Init+0x20a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <HAL_GPIO_Init+0x206>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a49      	ldr	r2, [pc, #292]	@ (80032e4 <HAL_GPIO_Init+0x320>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_GPIO_Init+0x202>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00c      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00a      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031ca:	2305      	movs	r3, #5
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x21c>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f0:	4935      	ldr	r1, [pc, #212]	@ (80032c8 <HAL_GPIO_Init+0x304>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a31      	ldr	r2, [pc, #196]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b2f      	ldr	r3, [pc, #188]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a26      	ldr	r2, [pc, #152]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003276:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800327c:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a0:	4a11      	ldr	r2, [pc, #68]	@ (80032e8 <HAL_GPIO_Init+0x324>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f ae96 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40013c00 	.word	0x40013c00

080032ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e001      	b.n	800330e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003338:	e003      	b.n	8003342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800333a:	887b      	ldrh	r3, [r7, #2]
 800333c:	041a      	lsls	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7ff f89a 	bl	8002578 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7ff f896 	bl	8002578 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fffa 	bl	80024f0 <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	08070b2c 	.word	0x08070b2c
 8003514:	200069cc 	.word	0x200069cc
 8003518:	200069d0 	.word	0x200069d0

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b0a6      	sub	sp, #152	@ 0x98
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4bc8      	ldr	r3, [pc, #800]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b0c      	cmp	r3, #12
 800354c:	f200 817e 	bhi.w	800384c <HAL_RCC_GetSysClockFreq+0x330>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800384d 	.word	0x0800384d
 8003560:	0800384d 	.word	0x0800384d
 8003564:	0800384d 	.word	0x0800384d
 8003568:	08003595 	.word	0x08003595
 800356c:	0800384d 	.word	0x0800384d
 8003570:	0800384d 	.word	0x0800384d
 8003574:	0800384d 	.word	0x0800384d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	0800384d 	.word	0x0800384d
 8003580:	0800384d 	.word	0x0800384d
 8003584:	0800384d 	.word	0x0800384d
 8003588:	08003707 	.word	0x08003707
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4bb6      	ldr	r3, [pc, #728]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x34c>)
 800358e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003592:	e15f      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003594:	4bb5      	ldr	r3, [pc, #724]	@ (800386c <HAL_RCC_GetSysClockFreq+0x350>)
 8003596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800359a:	e15b      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359c:	4bb1      	ldr	r3, [pc, #708]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a8:	4bae      	ldr	r3, [pc, #696]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d031      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b4:	4bab      	ldr	r3, [pc, #684]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	2200      	movs	r2, #0
 80035bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80035c8:	2300      	movs	r3, #0
 80035ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80035cc:	4ba7      	ldr	r3, [pc, #668]	@ (800386c <HAL_RCC_GetSysClockFreq+0x350>)
 80035ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035d2:	462a      	mov	r2, r5
 80035d4:	fb03 f202 	mul.w	r2, r3, r2
 80035d8:	2300      	movs	r3, #0
 80035da:	4621      	mov	r1, r4
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	4aa2      	ldr	r2, [pc, #648]	@ (800386c <HAL_RCC_GetSysClockFreq+0x350>)
 80035e4:	4621      	mov	r1, r4
 80035e6:	fba1 1202 	umull	r1, r2, r1, r2
 80035ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035ec:	460a      	mov	r2, r1
 80035ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80035f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035f2:	4413      	add	r3, r2
 80035f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035fa:	2200      	movs	r2, #0
 80035fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003600:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003604:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003608:	f7fc fe04 	bl	8000214 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4613      	mov	r3, r2
 8003612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003616:	e064      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b92      	ldr	r3, [pc, #584]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	653b      	str	r3, [r7, #80]	@ 0x50
 8003622:	657a      	str	r2, [r7, #84]	@ 0x54
 8003624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003634:	4622      	mov	r2, r4
 8003636:	462b      	mov	r3, r5
 8003638:	f04f 0000 	mov.w	r0, #0
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	0159      	lsls	r1, r3, #5
 8003642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003646:	0150      	lsls	r0, r2, #5
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4621      	mov	r1, r4
 800364e:	1a51      	subs	r1, r2, r1
 8003650:	6139      	str	r1, [r7, #16]
 8003652:	4629      	mov	r1, r5
 8003654:	eb63 0301 	sbc.w	r3, r3, r1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003666:	4659      	mov	r1, fp
 8003668:	018b      	lsls	r3, r1, #6
 800366a:	4651      	mov	r1, sl
 800366c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003670:	4651      	mov	r1, sl
 8003672:	018a      	lsls	r2, r1, #6
 8003674:	4651      	mov	r1, sl
 8003676:	ebb2 0801 	subs.w	r8, r2, r1
 800367a:	4659      	mov	r1, fp
 800367c:	eb63 0901 	sbc.w	r9, r3, r1
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800368c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003694:	4690      	mov	r8, r2
 8003696:	4699      	mov	r9, r3
 8003698:	4623      	mov	r3, r4
 800369a:	eb18 0303 	adds.w	r3, r8, r3
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	462b      	mov	r3, r5
 80036a2:	eb49 0303 	adc.w	r3, r9, r3
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036b4:	4629      	mov	r1, r5
 80036b6:	028b      	lsls	r3, r1, #10
 80036b8:	4621      	mov	r1, r4
 80036ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036be:	4621      	mov	r1, r4
 80036c0:	028a      	lsls	r2, r1, #10
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ca:	2200      	movs	r2, #0
 80036cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80036d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036d4:	f7fc fd9e 	bl	8000214 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4613      	mov	r3, r2
 80036de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e2:	4b60      	ldr	r3, [pc, #384]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	3301      	adds	r3, #1
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80036f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003704:	e0a6      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003706:	4b57      	ldr	r3, [pc, #348]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b54      	ldr	r3, [pc, #336]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02a      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b51      	ldr	r3, [pc, #324]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003728:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b4e      	ldr	r3, [pc, #312]	@ (800386c <HAL_RCC_GetSysClockFreq+0x350>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a4a      	ldr	r2, [pc, #296]	@ (800386c <HAL_RCC_GetSysClockFreq+0x350>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	677a      	str	r2, [r7, #116]	@ 0x74
 8003748:	460a      	mov	r2, r1
 800374a:	673a      	str	r2, [r7, #112]	@ 0x70
 800374c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800374e:	4413      	add	r3, r2
 8003750:	677b      	str	r3, [r7, #116]	@ 0x74
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003756:	2200      	movs	r2, #0
 8003758:	633b      	str	r3, [r7, #48]	@ 0x30
 800375a:	637a      	str	r2, [r7, #52]	@ 0x34
 800375c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003760:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003764:	f7fc fd56 	bl	8000214 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003772:	e05b      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	2200      	movs	r2, #0
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800377e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
 800378c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	0159      	lsls	r1, r3, #5
 800379e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a2:	0150      	lsls	r0, r2, #5
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4641      	mov	r1, r8
 80037aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ae:	4649      	mov	r1, r9
 80037b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037c8:	ebb2 040a 	subs.w	r4, r2, sl
 80037cc:	eb63 050b 	sbc.w	r5, r3, fp
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	00eb      	lsls	r3, r5, #3
 80037da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037de:	00e2      	lsls	r2, r4, #3
 80037e0:	4614      	mov	r4, r2
 80037e2:	461d      	mov	r5, r3
 80037e4:	4643      	mov	r3, r8
 80037e6:	18e3      	adds	r3, r4, r3
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	464b      	mov	r3, r9
 80037ec:	eb45 0303 	adc.w	r3, r5, r3
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037fe:	4629      	mov	r1, r5
 8003800:	028b      	lsls	r3, r1, #10
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003808:	4621      	mov	r1, r4
 800380a:	028a      	lsls	r2, r1, #10
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003814:	2200      	movs	r2, #0
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	61fa      	str	r2, [r7, #28]
 800381a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800381e:	f7fc fcf9 	bl	8000214 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4613      	mov	r3, r2
 8003828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800382c:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x348>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	0f1b      	lsrs	r3, r3, #28
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800383a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800383e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800384a:	e003      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x34c>)
 800384e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003854:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003858:	4618      	mov	r0, r3
 800385a:	3798      	adds	r7, #152	@ 0x98
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
 8003868:	00f42400 	.word	0x00f42400
 800386c:	017d7840 	.word	0x017d7840

08003870 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e28d      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8083 	beq.w	8003996 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003890:	4b94      	ldr	r3, [pc, #592]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b04      	cmp	r3, #4
 800389a:	d019      	beq.n	80038d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800389c:	4b91      	ldr	r3, [pc, #580]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038a8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b4:	d00c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b88      	ldr	r3, [pc, #544]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	4b84      	ldr	r3, [pc, #528]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05b      	beq.n	8003994 <HAL_RCC_OscConfig+0x124>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d157      	bne.n	8003994 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e25a      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x90>
 80038f2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xcc>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xb4>
 800390a:	4b76      	ldr	r3, [pc, #472]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b73      	ldr	r3, [pc, #460]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a72      	ldr	r2, [pc, #456]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xcc>
 8003924:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fe18 	bl	8002578 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fe14 	bl	8002578 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e21f      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b61      	ldr	r3, [pc, #388]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xdc>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fe04 	bl	8002578 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe fe00 	bl	8002578 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e20b      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b57      	ldr	r3, [pc, #348]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x104>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06f      	beq.n	8003a82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039a2:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ae:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b44      	ldr	r3, [pc, #272]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b41      	ldr	r3, [pc, #260]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x186>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1d3      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4937      	ldr	r1, [pc, #220]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b34      	ldr	r3, [pc, #208]	@ (8003ae8 <HAL_RCC_OscConfig+0x278>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fdad 	bl	8002578 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fe fda9 	bl	8002578 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1b4      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b28      	ldr	r3, [pc, #160]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4925      	ldr	r1, [pc, #148]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b24      	ldr	r3, [pc, #144]	@ (8003ae8 <HAL_RCC_OscConfig+0x278>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fd8c 	bl	8002578 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fd88 	bl	8002578 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e193      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d036      	beq.n	8003afc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_RCC_OscConfig+0x27c>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fd6c 	bl	8002578 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fd68 	bl	8002578 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e173      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x234>
 8003ac2:	e01b      	b.n	8003afc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fe fd55 	bl	8002578 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00e      	b.n	8003af0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fd51 	bl	8002578 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d907      	bls.n	8003af0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e15c      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	42470000 	.word	0x42470000
 8003aec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	4b8a      	ldr	r3, [pc, #552]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ea      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8097 	beq.w	8003c38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b83      	ldr	r3, [pc, #524]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	4a7e      	ldr	r2, [pc, #504]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b79      	ldr	r3, [pc, #484]	@ (8003d20 <HAL_RCC_OscConfig+0x4b0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <HAL_RCC_OscConfig+0x4b0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	@ (8003d20 <HAL_RCC_OscConfig+0x4b0>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fe fd11 	bl	8002578 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fe fd0d 	bl	8002578 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e118      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d20 <HAL_RCC_OscConfig+0x4b0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x31e>
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x358>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x340>
 8003b96:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a60      	ldr	r2, [pc, #384]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x358>
 8003bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a59      	ldr	r2, [pc, #356]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	4b57      	ldr	r3, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc0:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fcd2 	bl	8002578 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fcce 	bl	8002578 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0d7      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x368>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fe fcbc 	bl	8002578 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fe fcb8 	bl	8002578 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0c1      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	4a3a      	ldr	r2, [pc, #232]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80ad 	beq.w	8003d9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d060      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d145      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <HAL_RCC_OscConfig+0x4b4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fc8c 	bl	8002578 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fe fc88 	bl	8002578 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e093      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	491b      	ldr	r1, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x4b4>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fe fc5d 	bl	8002578 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe fc59 	bl	8002578 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e064      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x452>
 8003ce0:	e05c      	b.n	8003d9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_RCC_OscConfig+0x4b4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fc46 	bl	8002578 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fe fc42 	bl	8002578 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04d      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x480>
 8003d0e:	e045      	b.n	8003d9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e040      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_RCC_OscConfig+0x538>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d030      	beq.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d129      	bne.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d122      	bne.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d119      	bne.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d10f      	bne.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07b      	b.n	8003eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dce:	d009      	beq.n	8003de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
 8003dd6:	e005      	b.n	8003de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe faa0 	bl	8002344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	ea42 0103 	orr.w	r1, r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0104 	and.w	r1, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	f003 0210 	and.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <memset>:
 8003ebe:	4402      	add	r2, r0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d100      	bne.n	8003ec8 <memset+0xa>
 8003ec6:	4770      	bx	lr
 8003ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8003ecc:	e7f9      	b.n	8003ec2 <memset+0x4>
	...

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2600      	movs	r6, #0
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f818 	bl	8003f18 <_init>
 8003ee8:	1b64      	subs	r4, r4, r5
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2600      	movs	r6, #0
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08070b44 	.word	0x08070b44
 8003f0c:	08070b44 	.word	0x08070b44
 8003f10:	08070b44 	.word	0x08070b44
 8003f14:	08070b48 	.word	0x08070b48

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
